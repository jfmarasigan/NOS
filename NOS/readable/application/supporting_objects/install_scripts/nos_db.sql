
  CREATE TABLE "NIM022" 
   (	"BRAND_CODE" VARCHAR2(3 CHAR) NOT NULL ENABLE, 
	"BRAND_NAME" VARCHAR2(50 CHAR) NOT NULL ENABLE, 
	"DESCRIPTION" VARCHAR2(100 CHAR), 
	"CREATE_USER" VARCHAR2(10 CHAR) NOT NULL ENABLE, 
	"CREATE_DATE" DATE NOT NULL ENABLE, 
	"UPDATE_USER" VARCHAR2(10 CHAR), 
	"UPDATE_DATE" DATE, 
	"BRAND_ID" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	 CONSTRAINT "NIM022_BRAND_ID_PK" PRIMARY KEY ("BRAND_ID")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "NIM023" 
   (	"SIC_CODE" VARCHAR2(3 CHAR) NOT NULL ENABLE, 
	"SIC_NAME" VARCHAR2(50 CHAR) NOT NULL ENABLE, 
	"DESC" VARCHAR2(100 CHAR), 
	"CREATE_USER" VARCHAR2(10 CHAR) NOT NULL ENABLE, 
	"CREATE_DATE" DATE NOT NULL ENABLE, 
	"UPDATE_USER" VARCHAR2(10 CHAR), 
	"UPDATE_DATE" DATE, 
	"SIC_ID" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	 CONSTRAINT "NIM023_PK" PRIMARY KEY ("SIC_ID")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "NIM024" 
   (	"DEPT_CODE" VARCHAR2(1 CHAR) NOT NULL ENABLE, 
	"DEPT_NAME" VARCHAR2(50 CHAR) NOT NULL ENABLE, 
	"DESC" VARCHAR2(100 CHAR), 
	"CREATE_USER" VARCHAR2(10 CHAR) NOT NULL ENABLE, 
	"CREATE_DATE" DATE NOT NULL ENABLE, 
	"UPDATE_USER" VARCHAR2(10 CHAR), 
	"UPDATE_DATE" DATE, 
	"DEPT_ID" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	 CONSTRAINT "NIM024_PK" PRIMARY KEY ("DEPT_ID")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "NIM025" 
   (	"CLASS_CODE" VARCHAR2(10 CHAR) NOT NULL ENABLE, 
	"CLASS_NAME" VARCHAR2(50 CHAR) NOT NULL ENABLE, 
	"DESC" VARCHAR2(100 CHAR), 
	"CREATE_USER" VARCHAR2(10 CHAR) NOT NULL ENABLE, 
	"CREATE_DATE" DATE NOT NULL ENABLE, 
	"UPDATE_USER" VARCHAR2(10 CHAR), 
	"UPDATE_DATE" DATE, 
	"CLASS_ID" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	 CONSTRAINT "NIM025_CLASS_ID_PK" PRIMARY KEY ("CLASS_ID")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "NIM026" 
   (	"UOM_CODE" VARCHAR2(4 CHAR) NOT NULL ENABLE, 
	"UOM_NAME" VARCHAR2(20 CHAR) NOT NULL ENABLE, 
	"CREATE_USER" VARCHAR2(10 CHAR) NOT NULL ENABLE, 
	"CREATE_DATE" DATE NOT NULL ENABLE, 
	"UPDATE_USER" VARCHAR2(10 CHAR), 
	"UPDATE_DATE" DATE, 
	"UOM_ID" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	 CONSTRAINT "NIM026_PK" PRIMARY KEY ("UOM_ID")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "NIM027" 
   (	"WAREHOUSE_ID" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"WAREHOUSE_LOCATION" VARCHAR2(1 CHAR) NOT NULL ENABLE, 
	"LOCATION_DESC" VARCHAR2(50 CHAR) NOT NULL ENABLE, 
	"CREATE_USER" VARCHAR2(10 CHAR) NOT NULL ENABLE, 
	"CREATE_DATE" DATE NOT NULL ENABLE, 
	"UPDATE_USER" VARCHAR2(10 CHAR), 
	"UPDATE_DATE" DATE, 
	 CONSTRAINT "NIM027_WAREHOUSE_ID_PK" PRIMARY KEY ("WAREHOUSE_ID")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "NIM028" 
   (	"QTY_REASON_ID" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"REASON_NAME" VARCHAR2(50 CHAR) NOT NULL ENABLE, 
	"CREATE_USER" VARCHAR2(10 CHAR) NOT NULL ENABLE, 
	"CREATE_DATE" DATE NOT NULL ENABLE, 
	"UPDATE_USER" VARCHAR2(10 CHAR), 
	"UPDATE_DATE" DATE, 
	 CONSTRAINT "NIM028_QTY_REASON_ID_PK" PRIMARY KEY ("QTY_REASON_ID")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "NIM029" 
   (	"ADDRESS_TYPE_ID" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"ADDRESS_TYPE_NAME" VARCHAR2(20 CHAR) NOT NULL ENABLE, 
	"CREATE_USER" VARCHAR2(10 CHAR) NOT NULL ENABLE, 
	"CREATE_DATE" DATE NOT NULL ENABLE, 
	 CONSTRAINT "NIM029_ADDRESS_TYPE_ID_PK" PRIMARY KEY ("ADDRESS_TYPE_ID")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "NIM030" 
   (	"NOTE_ID" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"NOTE" VARCHAR2(4000 CHAR) NOT NULL ENABLE, 
	"CREATE_USER" VARCHAR2(10 CHAR) NOT NULL ENABLE, 
	"CREATE_DATE" DATE NOT NULL ENABLE, 
	"UPDATE_USER" VARCHAR2(10 CHAR), 
	"UPDATE_DATE" DATE, 
	 CONSTRAINT "NIM030_PK" PRIMARY KEY ("NOTE_ID")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "NIM032" 
   (	"PRICING_TYPE_ID" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"PRICING_TYPE_CODE" VARCHAR2(5 CHAR) NOT NULL ENABLE, 
	"PRICING_TYPE_DESCRIPTION" VARCHAR2(30 CHAR) NOT NULL ENABLE, 
	"CREATE_USER" VARCHAR2(10 CHAR) NOT NULL ENABLE, 
	"CREATE_DATE" DATE NOT NULL ENABLE, 
	"UPDATE_DATE" DATE, 
	"UPDATE_USER" VARCHAR2(10 CHAR), 
	 CONSTRAINT "NIM032_PK" PRIMARY KEY ("PRICING_TYPE_ID")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "NIM033" 
   (	"OPENING_EMAIL_ID" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"OPENING_EMAIL" VARCHAR2(4000 CHAR) NOT NULL ENABLE, 
	"CREATE_USER" VARCHAR2(10 CHAR) NOT NULL ENABLE, 
	"CREATE_DATE" DATE NOT NULL ENABLE, 
	"UPDATE_USER" VARCHAR2(10 CHAR), 
	"UPDATE_DATE" DATE, 
	 CONSTRAINT "NIM033_PK" PRIMARY KEY ("OPENING_EMAIL_ID")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "NIM034" 
   (	"CLOSING_EMAIL_ID" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"CLOSING_EMAIL" VARCHAR2(4000 CHAR) NOT NULL ENABLE, 
	"CREATE_USER" VARCHAR2(10 CHAR) NOT NULL ENABLE, 
	"CREATE_DATE" DATE NOT NULL ENABLE, 
	"UPDATE_USER" VARCHAR2(10 CHAR), 
	"UPDATE_DATE" DATE, 
	 CONSTRAINT "NIM034_PK" PRIMARY KEY ("CLOSING_EMAIL_ID")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "NIM036" 
   (	"UTILITIES_ID" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"MODULE_ID" NUMBER NOT NULL ENABLE, 
	"TABLE_CODE" VARCHAR2(6 CHAR) NOT NULL ENABLE, 
	"TABLE_NAME" VARCHAR2(30 CHAR) NOT NULL ENABLE, 
	"TABLE_DESCRIPTION" VARCHAR2(30 CHAR), 
	"CREATE_USER" VARCHAR2(10 CHAR) NOT NULL ENABLE, 
	"CREATE_DATE" DATE NOT NULL ENABLE, 
	"UPDATE_USER" VARCHAR2(10 CHAR), 
	"UPDATE_DATE" DATE, 
	 CONSTRAINT "NIM036_PK" PRIMARY KEY ("UTILITIES_ID")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "NIM037" 
   (	"OTAS_CODE" VARCHAR2(5 CHAR), 
	"OTAS_NAME" VARCHAR2(50 CHAR) NOT NULL ENABLE, 
	"CREATE_DATE" DATE NOT NULL ENABLE, 
	"CREATE_USER" VARCHAR2(10 CHAR) NOT NULL ENABLE, 
	"UPDATE_USER" VARCHAR2(10 CHAR), 
	"UPDATE_DATE" DATE, 
	"OTAS_ID" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	 CONSTRAINT "NIM037_OTAS_ID_PK" PRIMARY KEY ("OTAS_ID")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "NIM038" 
   (	"DOC_TYPE_ID" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"DOC_TYPE_CODE" VARCHAR2(1 CHAR) NOT NULL ENABLE, 
	"DOC_TYPE_NAME" VARCHAR2(15 CHAR) NOT NULL ENABLE, 
	"CREATE_USER" VARCHAR2(10 CHAR) NOT NULL ENABLE, 
	"CREATE_DATE" DATE NOT NULL ENABLE, 
	"UPDATE_USER" VARCHAR2(10 CHAR), 
	"UPDATE_DATE" DATE, 
	 CONSTRAINT "NIM038_PK" PRIMARY KEY ("DOC_TYPE_ID")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "NIM039" 
   (	"EXPENSE_CLASS_ID" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"EXPENSE_CLASS_CODE" VARCHAR2(1 CHAR) NOT NULL ENABLE, 
	"EXPENSE_CLASS_NAME" VARCHAR2(30 CHAR) NOT NULL ENABLE, 
	"CREATE_USER" VARCHAR2(10 CHAR) NOT NULL ENABLE, 
	"CREATE_DATE" DATE NOT NULL ENABLE, 
	"UPDATE_USER" VARCHAR2(10 CHAR), 
	"UPDATE_DATE" DATE, 
	 CONSTRAINT "NIM039_PK" PRIMARY KEY ("EXPENSE_CLASS_ID")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "NIM040" 
   (	"COA_EXPENSE_ID" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"COA_EXPENSE_CODE" NUMBER(4,0) NOT NULL ENABLE, 
	"COA_EXPENSE_NAME" VARCHAR2(15 CHAR) NOT NULL ENABLE, 
	"CREATE_USER" VARCHAR2(10 CHAR) NOT NULL ENABLE, 
	"CREATE_DATE" DATE NOT NULL ENABLE, 
	"UPDATE_USER" VARCHAR2(10 CHAR), 
	"UPDATE_DATE" DATE, 
	 CONSTRAINT "NIM040_PK" PRIMARY KEY ("COA_EXPENSE_ID")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "NIM041" 
   (	"ASG_ID" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"ASG_CODE" NUMBER(10,0) NOT NULL ENABLE, 
	"ASG_DESC" VARCHAR2(30 CHAR) NOT NULL ENABLE, 
	"CREATE_USER" VARCHAR2(10 CHAR) NOT NULL ENABLE, 
	"CREATE_DATE" DATE NOT NULL ENABLE, 
	"UPDATE_USER" VARCHAR2(10 CHAR), 
	"UPDATE_DATE" DATE, 
	 CONSTRAINT "NIM041_PK" PRIMARY KEY ("ASG_ID")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "NIT001" 
   (	"ITEM_ID" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"BRAND_ID" NUMBER NOT NULL ENABLE, 
	"SIC_ID" NUMBER NOT NULL ENABLE, 
	"DEPT_ID" NUMBER NOT NULL ENABLE, 
	"CLASS_ID" NUMBER NOT NULL ENABLE, 
	"ITEM_DESC" VARCHAR2(30 CHAR) NOT NULL ENABLE, 
	"ITEM_NUM" VARCHAR2(10 CHAR) NOT NULL ENABLE, 
	"MIN_STOCK_LVL" NUMBER(4,0) NOT NULL ENABLE, 
	"MAX_STOCK_LVL" NUMBER(5,0) NOT NULL ENABLE, 
	"FULL_ITEM_DESC" VARCHAR2(4000 CHAR) NOT NULL ENABLE, 
	"CREATE_USER" VARCHAR2(10 CHAR) NOT NULL ENABLE, 
	"CREATE_DATE" DATE NOT NULL ENABLE, 
	"UPDATE_USER" VARCHAR2(10 CHAR), 
	"UPDATE_DATE" DATE, 
	"HAS_SERIAL_NUMBER" VARCHAR2(1) DEFAULT 'N' NOT NULL ENABLE, 
	"EXCISE_TAX_RATE" NUMBER(5,2), 
	"SELLING_PRICE_FACTOR" NUMBER(5,2), 
	 CONSTRAINT "NIT001_ITEM_ID_PK" PRIMARY KEY ("ITEM_ID")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "NIT002" 
   (	"ITEM_ID" NUMBER, 
	"UOM_ID" NUMBER, 
	"UPC" VARCHAR2(14 CHAR) NOT NULL ENABLE, 
	"PRICE" NUMBER(10,2) NOT NULL ENABLE, 
	"CREATE_USER" VARCHAR2(10 CHAR) NOT NULL ENABLE, 
	"CREATE_DATE" DATE NOT NULL ENABLE, 
	"UPDATE_USER" VARCHAR2(10 CHAR), 
	"UPDATE_DATE" DATE, 
	"QUANTITY" NUMBER(3,0), 
	"LEVEL" NUMBER(1,0) NOT NULL ENABLE, 
	 CONSTRAINT "NIT002_PK" PRIMARY KEY ("ITEM_ID", "UOM_ID")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "NIT003" 
   (	"ITEM_HISTORY_ID" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"ITEM_ID" NUMBER, 
	"CHANGED_COLUMN_NAME" VARCHAR2(4000 CHAR) NOT NULL ENABLE, 
	"OLD_VALUE" VARCHAR2(4000 CHAR) NOT NULL ENABLE, 
	"NEW_VALUE" VARCHAR2(4000 CHAR) NOT NULL ENABLE, 
	"CREATE_USER" VARCHAR2(10 CHAR) NOT NULL ENABLE, 
	"CREATE_DATE" DATE NOT NULL ENABLE, 
	 CONSTRAINT "NIT003_ITEM_HISTORY_ID_PK" PRIMARY KEY ("ITEM_HISTORY_ID")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "NIT004" 
   (	"ITEM_ID" NUMBER, 
	"WAREHOUSE_ID" NUMBER, 
	"CREATE_USER" VARCHAR2(10 CHAR) NOT NULL ENABLE, 
	"CREATE_DATE" DATE NOT NULL ENABLE, 
	"UPDATE_USER" VARCHAR2(10 CHAR), 
	"UPDATE_DATE" DATE, 
	"QTY" NUMBER(5,0) NOT NULL ENABLE, 
	"UOM_ID" NUMBER NOT NULL ENABLE, 
	 CONSTRAINT "NIT004_PK" PRIMARY KEY ("ITEM_ID", "WAREHOUSE_ID", "UOM_ID")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "NIT005" 
   (	"QTY_ADJUSTMENT_ID" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"ITEM_ID" NUMBER, 
	"QTY_REASON_ID" NUMBER, 
	"OLD_QTY" NUMBER(9,0) NOT NULL ENABLE, 
	"QTY_CHANGE" NUMBER(9,0) NOT NULL ENABLE, 
	"NEW_QTY" NUMBER(9,0) NOT NULL ENABLE, 
	"CREATE_USER" VARCHAR2(10 CHAR) NOT NULL ENABLE, 
	"CREATE_DATE" DATE NOT NULL ENABLE, 
	"UOM_ID" NUMBER NOT NULL ENABLE, 
	"WAREHOUSE_ID" NUMBER NOT NULL ENABLE, 
	 CONSTRAINT "NIT005_QTY_ADJUSTMENT_ID_PK" PRIMARY KEY ("QTY_ADJUSTMENT_ID")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "NIT006" 
   (	"VENDOR_CODE" VARCHAR2(3 CHAR) NOT NULL ENABLE, 
	"VENDOR_NAME" VARCHAR2(50 CHAR) NOT NULL ENABLE, 
	"CONTACT_PERSON" VARCHAR2(20 CHAR) NOT NULL ENABLE, 
	"PHONE_NUMBER" VARCHAR2(12 CHAR) NOT NULL ENABLE, 
	"PAYMENT_TERM" VARCHAR2(10 CHAR) NOT NULL ENABLE, 
	"CREATE_USER" VARCHAR2(10 CHAR) NOT NULL ENABLE, 
	"CREATE_DATE" DATE NOT NULL ENABLE, 
	"UPDATE_USER" VARCHAR2(10 CHAR), 
	"UPDATE_DATE" DATE, 
	"EMAIL_ADDRESS1" VARCHAR2(20 CHAR) NOT NULL ENABLE, 
	"EMAIL_ADDRESS2" VARCHAR2(20 CHAR), 
	"VENDOR_TYPE" VARCHAR2(1 CHAR) NOT NULL ENABLE, 
	"VENDOR_ID" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"FAX_NUMBER" VARCHAR2(12 CHAR), 
	 CONSTRAINT "NIT006_VENDOR_ID_PK" PRIMARY KEY ("VENDOR_ID")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "NIT007" 
   (	"ITEM_ID" NUMBER, 
	"VENDOR_ID" NUMBER NOT NULL ENABLE, 
	"CREATE_USER" VARCHAR2(10 CHAR) NOT NULL ENABLE, 
	"CREATE_DATE" DATE NOT NULL ENABLE, 
	"UPDATE_USER" VARCHAR2(10 CHAR), 
	"UPDATE_DATE" DATE, 
	"ITEM_NUMBER" VARCHAR2(20 CHAR) NOT NULL ENABLE, 
	"LANDED_COST_FACTOR" NUMBER(5,2), 
	"VENDOR_SEQUENCE" NUMBER NOT NULL ENABLE, 
	 CONSTRAINT "NIT007_PK" PRIMARY KEY ("ITEM_ID", "VENDOR_ID")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "NIT008" 
   (	"DOC_ID" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"VENDOR_ID" NUMBER NOT NULL ENABLE, 
	"DOC_NAME" VARCHAR2(30 CHAR) NOT NULL ENABLE, 
	"DOC_TYPE" VARCHAR2(20 CHAR) NOT NULL ENABLE, 
	"CREATE_USER" VARCHAR2(10 CHAR) NOT NULL ENABLE, 
	"CREATE_DATE" DATE NOT NULL ENABLE, 
	"UPDATE_USER" VARCHAR2(10 CHAR), 
	"UPDATE_DATE" DATE, 
	 CONSTRAINT "NIT008_DOC_ID_PK" PRIMARY KEY ("DOC_ID")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "NIT009" 
   (	"VENDOR_ID" NUMBER NOT NULL ENABLE, 
	"ADDRESS_TYPE_ID" NUMBER, 
	"STREET" VARCHAR2(30 CHAR) NOT NULL ENABLE, 
	"CITY" VARCHAR2(20 CHAR) NOT NULL ENABLE, 
	"STATE" VARCHAR2(20 CHAR) NOT NULL ENABLE, 
	"ZIPCODE" VARCHAR2(5 CHAR) NOT NULL ENABLE, 
	"COUNTRY" VARCHAR2(20 CHAR) NOT NULL ENABLE, 
	"CREATE_USER" VARCHAR2(10 CHAR) NOT NULL ENABLE, 
	"CREATE_DATE" DATE NOT NULL ENABLE, 
	"UPDATE_USER" VARCHAR2(10 CHAR), 
	"UPDATE_DATE" DATE, 
	 CONSTRAINT "NIT009_PK" PRIMARY KEY ("VENDOR_ID", "ADDRESS_TYPE_ID")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "NIT010" 
   (	"TRANSFER_ID" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"TRANSFER_DATE" DATE NOT NULL ENABLE, 
	"FROMWAREHOUSE_ID" NUMBER NOT NULL ENABLE, 
	"TOWAREHOUSE_ID" NUMBER NOT NULL ENABLE, 
	"DELIVERY_NAME" VARCHAR2(30 CHAR) NOT NULL ENABLE, 
	"RECEIVER" VARCHAR2(30 CHAR) NOT NULL ENABLE, 
	"CREATE_USER" VARCHAR2(10 CHAR) NOT NULL ENABLE, 
	"CREATE_DATE" DATE NOT NULL ENABLE, 
	"UPDATE_USER" VARCHAR2(10 CHAR), 
	"UPDATE_DATE" DATE, 
	"IS_POSTED" VARCHAR2(1 CHAR) DEFAULT 'N' NOT NULL ENABLE, 
	 CONSTRAINT "NIT010_TRANSFER_ID_PK" PRIMARY KEY ("TRANSFER_ID")
  USING INDEX  ENABLE, 
	 CONSTRAINT "NIT010_IS_POSTED_CHK" CHECK ( "IS_POSTED" IN ('Y', 'N') ) ENABLE
   ) ;

  CREATE TABLE "NIT011" 
   (	"TRANSFER_ID" NUMBER, 
	"ITEM_ID" NUMBER, 
	"QTY" NUMBER(9,0) NOT NULL ENABLE, 
	"CREATE_USER" VARCHAR2(10 CHAR) NOT NULL ENABLE, 
	"CREATE_DATE" DATE NOT NULL ENABLE, 
	"UPDATE_USER" VARCHAR2(10 CHAR), 
	"UPDATE_DATE" DATE, 
	"UOM_ID" NUMBER NOT NULL ENABLE, 
	 CONSTRAINT "NIT011_PK" PRIMARY KEY ("TRANSFER_ID", "ITEM_ID", "UOM_ID")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "NIT012" 
   (	"VENDOR_ID" NUMBER NOT NULL ENABLE, 
	"IN_PO_VALUE" NUMBER(10,2) NOT NULL ENABLE, 
	"ETD_DATE" DATE NOT NULL ENABLE, 
	"ETA_DATE" DATE NOT NULL ENABLE, 
	"EXCISE_TAX" NUMBER(10,2), 
	"CREATE_USER" VARCHAR2(10 CHAR) NOT NULL ENABLE, 
	"CREATE_DATE" DATE NOT NULL ENABLE, 
	"UPDATE_USER" VARCHAR2(10 CHAR), 
	"UPDATE_DATE" DATE, 
	"VESSEL_NAME" VARCHAR2(50 CHAR) NOT NULL ENABLE, 
	"PRICING_TYPE_ID" NUMBER NOT NULL ENABLE, 
	"ADDED_COST_OPERATOR" VARCHAR2(1 CHAR) NOT NULL ENABLE, 
	"ADDED_COST_AMOUNT" NUMBER(6,3) NOT NULL ENABLE, 
	"IS_POSTED" VARCHAR2(1 CHAR) DEFAULT 'N' NOT NULL ENABLE, 
	"PARENT_PO_ID" VARCHAR2(15 CHAR), 
	"PO_ID" VARCHAR2(15 CHAR) NOT NULL ENABLE, 
	"REFERENCE_PO_ID" VARCHAR2(15 CHAR), 
	"EX_PO_VALUE" NUMBER(10,2) NOT NULL ENABLE, 
	 CONSTRAINT "NIT012_PO_ID_PK" PRIMARY KEY ("PO_ID")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "NIT013" 
   (	"PO_ID" VARCHAR2(15 CHAR) NOT NULL ENABLE, 
	"ITEM_ID" NUMBER NOT NULL ENABLE, 
	"QTY" NUMBER(9,0) NOT NULL ENABLE, 
	"CREATE_USER" VARCHAR2(10 CHAR) NOT NULL ENABLE, 
	"CREATE_DATE" DATE NOT NULL ENABLE, 
	"UPDATE_USER" VARCHAR2(10 CHAR), 
	"UPDATE_DATE" DATE, 
	"VENDOR_PRICE" NUMBER(6,2) NOT NULL ENABLE, 
	"INTERNAL_UOM_ID" NUMBER NOT NULL ENABLE, 
	"EXTERNAL_UOM_ID" NUMBER NOT NULL ENABLE, 
	"INTERNAL_PRICE" NUMBER(6,2) NOT NULL ENABLE, 
	"EXTERNAL_PRICE" NUMBER(6,2) NOT NULL ENABLE, 
	"VENDOR_ID" NUMBER, 
	 CONSTRAINT "NIT013_PK" PRIMARY KEY ("PO_ID", "ITEM_ID")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "NIT014" 
   (	"PO_NOTES_ID" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"ACCOUNT_NO" VARCHAR2(15 CHAR) NOT NULL ENABLE, 
	"REMARKS" VARCHAR2(100 CHAR) NOT NULL ENABLE, 
	"NOTE_ID" NUMBER NOT NULL ENABLE, 
	"IMPORTANT" VARCHAR2(100 CHAR), 
	"SUBJECT" VARCHAR2(150 CHAR) NOT NULL ENABLE, 
	"OPENING_EMAIL_ID" NUMBER NOT NULL ENABLE, 
	"LESS" VARCHAR2(30 CHAR), 
	"ADD" VARCHAR2(30 CHAR), 
	"CLOSING_EMAIL_ID" NUMBER NOT NULL ENABLE, 
	"CREATE_USER" VARCHAR2(10 CHAR) NOT NULL ENABLE, 
	"CREATE_DATE" DATE NOT NULL ENABLE, 
	"UPDATE_USER" VARCHAR2(10 CHAR), 
	"UPDATE_DATE" DATE, 
	"NOTE" VARCHAR2(4000 CHAR), 
	"OPENING_EMAIL" VARCHAR2(4000 CHAR), 
	"CLOSING_EMAIL" VARCHAR2(4000 CHAR), 
	"PO_ID" VARCHAR2(15 CHAR) NOT NULL ENABLE, 
	 CONSTRAINT "NIT014_PK" PRIMARY KEY ("PO_NOTES_ID")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "NIT015" 
   (	"SHIPMENT_ID" NUMBER NOT NULL ENABLE, 
	"PO_ID" VARCHAR2(15 CHAR), 
	"CREATE_USER" VARCHAR2(10 CHAR) NOT NULL ENABLE, 
	"CREATE_DATE" DATE NOT NULL ENABLE, 
	"UPDATE_USER" VARCHAR2(10 CHAR), 
	"UPDATE_DATE" DATE, 
	"SVP_ID" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"VENDOR_SEQUENCE" NUMBER(2,0) NOT NULL ENABLE, 
	"VENDOR_ID" NUMBER NOT NULL ENABLE, 
	 CONSTRAINT "NIT015_PK" PRIMARY KEY ("SVP_ID")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "NIT016" 
   (	"SHIPMENT_ID" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"ETD" DATE NOT NULL ENABLE, 
	"ETA" DATE NOT NULL ENABLE, 
	"ATA" DATE NOT NULL ENABLE, 
	"VESSEL_NAME" VARCHAR2(50 CHAR) NOT NULL ENABLE, 
	"CREATE_USER" VARCHAR2(10 CHAR) NOT NULL ENABLE, 
	"CREATE_DATE" DATE NOT NULL ENABLE, 
	"UPDATE_USER" VARCHAR2(10 CHAR), 
	"UPDATE_DATE" DATE, 
	"IS_POSTED" VARCHAR2(1 CHAR) DEFAULT 'N' NOT NULL ENABLE, 
	"IS_RECEIVED" VARCHAR2(1 CHAR) DEFAULT 'N' NOT NULL ENABLE, 
	"CONTAINER_NO" VARCHAR2(12 CHAR), 
	"WAREHOUSE_ID" NUMBER, 
	"VESSEL_BL_NO" VARCHAR2(18 CHAR), 
	"BARGE" VARCHAR2(40 CHAR), 
	"BARGE_BL_NO" VARCHAR2(18 CHAR), 
	"CONTAINER_TYPE" VARCHAR2(4 CHAR), 
	"ORIGIN" VARCHAR2(10 CHAR), 
	"SHIPMENT_NUMBER" VARCHAR2(8 CHAR) NOT NULL ENABLE, 
	 CONSTRAINT "NIT016_SHIPMENT_ID_PK" PRIMARY KEY ("SHIPMENT_ID")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "NIT017" 
   (	"SHIPMENT_ID" NUMBER NOT NULL ENABLE, 
	"CREATE_USER" VARCHAR2(10 CHAR) NOT NULL ENABLE, 
	"CREATE_DATE" DATE NOT NULL ENABLE, 
	"UPDATE_USER" VARCHAR2(10 CHAR), 
	"UPDATE_DATE" DATE, 
	"AP_ID" NUMBER, 
	"FREIGHT_COST" NUMBER(7,2), 
	"INSURANCE_COST" NUMBER(7,2), 
	"HANDLING_COST" NUMBER(7,2), 
	"DUTIES_AND_TAXES" NUMBER(7,2), 
	"MISC_EXPENSES" NUMBER(7,2), 
	"VENDOR_CREDITS" NUMBER(7,2), 
	"COST_ID" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	 CONSTRAINT "NIT017_COST_ID_PK" PRIMARY KEY ("COST_ID")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "NIT018" 
   (	"SHIPMENT_ID" NUMBER NOT NULL ENABLE, 
	"ITEM_ID" NUMBER NOT NULL ENABLE, 
	"QTY" NUMBER(9,0) NOT NULL ENABLE, 
	"COST" NUMBER(6,2) NOT NULL ENABLE, 
	"UOM_ID" NUMBER NOT NULL ENABLE, 
	"PRODUCT_DATE" VARCHAR2(13 CHAR), 
	"ENCODED" VARCHAR2(10 CHAR), 
	"LANDED_COST" NUMBER, 
	"CREATE_USER" VARCHAR2(10 CHAR) NOT NULL ENABLE, 
	"CREATE_DATE" DATE NOT NULL ENABLE, 
	"UPDATE_USER" VARCHAR2(10 CHAR), 
	"UPDATE_DATE" DATE, 
	"PO_ID" VARCHAR2(15 CHAR), 
	"SHIPMENT_ITEMS_ID" NUMBER NOT NULL ENABLE, 
	 CONSTRAINT "NIT018_PK" PRIMARY KEY ("SHIPMENT_ID", "SHIPMENT_ITEMS_ID")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "NIT019" 
   (	"AP_ID" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"AMOUNT" NUMBER(10,2) NOT NULL ENABLE, 
	"CREATE_USER" VARCHAR2(10 CHAR) NOT NULL ENABLE, 
	"CREATE_DATE" DATE NOT NULL ENABLE, 
	"UPDATE_USER" VARCHAR2(10 CHAR), 
	"UPDATE_DATE" DATE, 
	"VENDOR_ID" NUMBER, 
	"DOCUMENT_NUMBER" VARCHAR2(10 CHAR) NOT NULL ENABLE, 
	"DOCUMENT_DATE" DATE NOT NULL ENABLE, 
	"EXPENSE_PERIOD_MONTH" NUMBER(2,0), 
	"EXPENSE_PERIOD_YEAR" NUMBER(4,0), 
	"DOC_TYPE_ID" NUMBER, 
	"EXPENSE_DESCRIPTION" VARCHAR2(30 CHAR) NOT NULL ENABLE, 
	"CONTAINER_NO" VARCHAR2(12 CHAR) NOT NULL ENABLE, 
	"ATA" DATE NOT NULL ENABLE, 
	"EXPENSE_CLASS_ID" NUMBER, 
	"COA_EXPENSE_ID" NUMBER, 
	"ASG_ID" NUMBER, 
	"INVOICE_ID" NUMBER, 
	 CONSTRAINT "NIT019_AP_ID_PK" PRIMARY KEY ("AP_ID")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "NIT020" 
   (	"CONVERT_ID" VARCHAR2(8 CHAR), 
	"PROCESSING_DATE" DATE NOT NULL ENABLE, 
	"WAREHOUSE_ID" NUMBER NOT NULL ENABLE, 
	"FROM_ITEM_ID" NUMBER NOT NULL ENABLE, 
	"FROM_NO_OF_UNITS" NUMBER NOT NULL ENABLE, 
	"FROM_UOM_ID" NUMBER NOT NULL ENABLE, 
	"TO_ITEM_ID" NUMBER NOT NULL ENABLE, 
	"TO_NO_OF_UNITS" NUMBER NOT NULL ENABLE, 
	"TO_UOM_ID" NUMBER NOT NULL ENABLE, 
	"NOTES" VARCHAR2(40 CHAR), 
	"IS_POSTED" VARCHAR2(1 CHAR) DEFAULT 'N' NOT NULL ENABLE, 
	"CREATE_USER" VARCHAR2(10 CHAR) NOT NULL ENABLE, 
	"CREATE_DATE" DATE NOT NULL ENABLE, 
	"UPDATE_USER" VARCHAR2(10 CHAR), 
	"UPDATE_DATE" DATE, 
	"INVOICE_NUMBER" VARCHAR2(9), 
	"INVOICE_DATE" DATE, 
	"CUSTOMER_NAME" VARCHAR2(40), 
	 CONSTRAINT "NIT020_PK" PRIMARY KEY ("CONVERT_ID")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "NIT021" 
   (	"PAYMENT_ID" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"PAYMENT_METHOD_ID" NUMBER NOT NULL ENABLE, 
	"AMOUNT" NUMBER(10,2) NOT NULL ENABLE, 
	"CREATE_USER" VARCHAR2(10 CHAR) NOT NULL ENABLE, 
	"CREATE_DATE" DATE NOT NULL ENABLE, 
	"UPDATE_USER" VARCHAR2(10 CHAR), 
	"UPDATE_DATE" DATE, 
	"AP_ID" NUMBER NOT NULL ENABLE, 
	"BANK_NAME" VARCHAR2(5 CHAR) NOT NULL ENABLE, 
	"CHECK_NUMBER" VARCHAR2(15 CHAR) NOT NULL ENABLE, 
	"CHECK_DATE" DATE NOT NULL ENABLE, 
	"MATURITY_DATE" DATE NOT NULL ENABLE, 
	 CONSTRAINT "NIT021_PAYMENT_ID_PK" PRIMARY KEY ("PAYMENT_ID")
  USING INDEX  ENABLE, 
	 CONSTRAINT "NIT021_PAYMENT_METHOD_ID_CHK" CHECK ( "PAYMENT_METHOD_ID"  in (1, 2) ) ENABLE
   ) ;

  CREATE TABLE "NIT022" 
   (	"TRANSACTION_ID" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"ITEM_ID" NUMBER NOT NULL ENABLE, 
	"WAREHOUSE_ID" NUMBER NOT NULL ENABLE, 
	"TRANSACTION_TYPE" NUMBER(1,0) NOT NULL ENABLE, 
	"QUANTITY" NUMBER(5,0) NOT NULL ENABLE, 
	"REFERENCE_ID" NUMBER, 
	"BALANCE_AFTER_TRANSACTION" NUMBER(5,0) NOT NULL ENABLE, 
	 CONSTRAINT "NIT022_PK" PRIMARY KEY ("TRANSACTION_ID")
  USING INDEX  ENABLE, 
	 CONSTRAINT "NIT022_TRAN_TYPE_CHK" CHECK ( "TRANSACTION_TYPE" in (1, 2) ) ENABLE
   ) ;

  CREATE TABLE "NIT023" 
   (	"ITEM_ID" NUMBER NOT NULL ENABLE, 
	"PO_ID_1" VARCHAR2(15 CHAR), 
	"PO_ID_2" VARCHAR2(15 CHAR), 
	"PO_ID_3" VARCHAR2(15 CHAR), 
	"PO_ID_4" VARCHAR2(15 CHAR), 
	"PO_ID_5" VARCHAR2(15 CHAR), 
	"PO_ID_6" VARCHAR2(15 CHAR), 
	"CREATE_USER" VARCHAR2(10 CHAR) NOT NULL ENABLE, 
	"CREATE_DATE" DATE NOT NULL ENABLE
   ) ;

  CREATE TABLE "NIT024" 
   (	"PO_ID" VARCHAR2(15 CHAR) NOT NULL ENABLE, 
	"CREATE_USER" VARCHAR2(10 CHAR) NOT NULL ENABLE, 
	"CREATE_DATE" DATE NOT NULL ENABLE, 
	"UPDATE_USER" VARCHAR2(10 CHAR), 
	"UPDATE_DATE" DATE, 
	 CONSTRAINT "NIT024_PK" PRIMARY KEY ("PO_ID")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "NIT025" 
   (	"PO_ID" VARCHAR2(15 CHAR) NOT NULL ENABLE, 
	"ITEM_ID" NUMBER NOT NULL ENABLE, 
	"QTY" NUMBER(9,0) NOT NULL ENABLE, 
	"CREATE_USER" VARCHAR2(10 CHAR) NOT NULL ENABLE, 
	"CREATE_DATE" DATE NOT NULL ENABLE, 
	"UPDATE_USER" VARCHAR2(10 CHAR), 
	"UPDATE_DATE" DATE, 
	"VENDOR_PRICE" NUMBER(6,2) NOT NULL ENABLE, 
	"INTERNAL_UOM_ID" NUMBER, 
	"EXTERNAL_UOM_ID" NUMBER, 
	"INTERNAL_PRICE" NUMBER(6,2) NOT NULL ENABLE, 
	"EXTERNAL_PRICE" NUMBER(6,2) NOT NULL ENABLE, 
	 CONSTRAINT "NIT025_PK" PRIMARY KEY ("PO_ID", "ITEM_ID")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "NIT026" 
   (	"SERIAL_NUMBER_ID" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"SHIPMENT_ID" NUMBER NOT NULL ENABLE, 
	"SERIAL_NUMBER" VARCHAR2(20 CHAR) NOT NULL ENABLE, 
	"CREATE_USER" VARCHAR2(10 CHAR) NOT NULL ENABLE, 
	"CREATE_DATE" DATE NOT NULL ENABLE, 
	"UPDATE_USER" VARCHAR2(10 CHAR), 
	"UPDATE_DATE" DATE, 
	"SHIPMENT_ITEMS_ID" NUMBER, 
	 CONSTRAINT "NIT026_PK" PRIMARY KEY ("SERIAL_NUMBER_ID")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "NIT035" 
   (	"SVP_ID" NUMBER NOT NULL ENABLE, 
	"INVOICE_ID" NUMBER NOT NULL ENABLE, 
	"CREATE_USER" VARCHAR2(10 CHAR) NOT NULL ENABLE, 
	"CREATE_DATE" DATE NOT NULL ENABLE, 
	"UPDATE_USER" VARCHAR2(10 CHAR), 
	"UPDATE_DATE" DATE, 
	 CONSTRAINT "NIT035_PK" PRIMARY KEY ("SVP_ID", "INVOICE_ID")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "NIT036" 
   (	"INVOICE_ID" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"DOCUMENT_NUMBER" VARCHAR2(10 CHAR) NOT NULL ENABLE, 
	"CREATE_USER" VARCHAR2(10 CHAR) NOT NULL ENABLE, 
	"CREATE_DATE" DATE NOT NULL ENABLE, 
	"UPDATE_USER" VARCHAR2(10 CHAR), 
	"UPDATE_DATE" DATE, 
	 CONSTRAINT "NIT036_PK" PRIMARY KEY ("INVOICE_ID")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "NPM001" 
   (	"INVOICE_TYPE_ID" NUMBER(9,0) GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"INVOICE_TYPE_NAME" VARCHAR2(50 CHAR) NOT NULL ENABLE, 
	"DESCRIPTION" VARCHAR2(200 CHAR), 
	"USER_CREATED" VARCHAR2(50 CHAR) NOT NULL ENABLE, 
	"DATE_CREATED" DATE NOT NULL ENABLE, 
	"USER_UPDATE" VARCHAR2(50 CHAR), 
	"DATE_UPDATED" DATE, 
	 CONSTRAINT "NPM001_INVOICE_TYPE_ID_PK" PRIMARY KEY ("INVOICE_TYPE_ID")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "NPM002" 
   (	"TAX_ID" NUMBER(9,0) GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"TAX_NAME" VARCHAR2(50 CHAR) NOT NULL ENABLE, 
	"TYPE" VARCHAR2(50 CHAR) NOT NULL ENABLE, 
	"VALUE" NUMBER(9,0) NOT NULL ENABLE, 
	"USAGE" VARCHAR2(50 CHAR), 
	"USER_CREATED" VARCHAR2(50 CHAR) NOT NULL ENABLE, 
	"DATE_CREATED" DATE NOT NULL ENABLE, 
	"USER_UPDATE" VARCHAR2(50 CHAR), 
	"DATE_UPDATED" DATE, 
	 CONSTRAINT "NPM002_TAX_ID_PK" PRIMARY KEY ("TAX_ID")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "NPM003" 
   (	"ACCOUNT_TYPE_ID" NUMBER(9,0) GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"ACCOUNT_TYPE_NAME" VARCHAR2(50 CHAR) NOT NULL ENABLE, 
	"ACCOUNT_TYPE_CODE" VARCHAR2(1 CHAR) NOT NULL ENABLE, 
	"DESCRIPTION" VARCHAR2(200 CHAR), 
	"USER_CREATED" VARCHAR2(50 CHAR) NOT NULL ENABLE, 
	"DATE_CREATE" DATE NOT NULL ENABLE, 
	"USER_UPDATE" VARCHAR2(50 CHAR), 
	"DATE_UPDATED" DATE, 
	 CONSTRAINT "NPM003_PK" PRIMARY KEY ("ACCOUNT_TYPE_ID")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "NPM004" 
   (	"PRINT_LOCATION_ID" NUMBER(9,0) GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"LOCATION_CODE" VARCHAR2(50 CHAR) NOT NULL ENABLE, 
	"DESCRIPTION" VARCHAR2(200 CHAR), 
	"USER_CREATED" VARCHAR2(50 CHAR) NOT NULL ENABLE, 
	"DATE_CREATED" DATE NOT NULL ENABLE, 
	"USER_UPDATE" VARCHAR2(50 CHAR), 
	"DATE_UPDATED" DATE, 
	 CONSTRAINT "NPM004_PRINT_LOCATION_ID_PK" PRIMARY KEY ("PRINT_LOCATION_ID")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "NPM005" 
   (	"PAYMENT_METHOD_ID" NUMBER(9,0) GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"METHOD_NAME" VARCHAR2(50 CHAR) NOT NULL ENABLE, 
	"DESCRIPTION" VARCHAR2(200 CHAR), 
	"USER_CREATED" VARCHAR2(50 CHAR) NOT NULL ENABLE, 
	"DATE_CREATED" DATE NOT NULL ENABLE, 
	"USER_UPDATE" VARCHAR2(50 CHAR), 
	"DATE_UPDATED" DATE, 
	 CONSTRAINT "NPM005_PAYMENT_METHOD_ID_PK" PRIMARY KEY ("PAYMENT_METHOD_ID")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "NPM006" 
   (	"PAYMENT_TERMS_ID" NUMBER(9,0) GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"AMOUNT" NUMBER(9,0) NOT NULL ENABLE, 
	"SPLIT_COUNT" NUMBER(2,0) NOT NULL ENABLE, 
	"USER_CREATED" VARCHAR2(50 CHAR) NOT NULL ENABLE, 
	"DATE_CREATED" DATE NOT NULL ENABLE, 
	"USER_UPDATE" VARCHAR2(50 CHAR), 
	"DATE_UPDATED" DATE, 
	"PAYMENT_TERMS_NAME" VARCHAR2(50 CHAR) NOT NULL ENABLE, 
	"DAYS" NUMBER NOT NULL ENABLE, 
	 CONSTRAINT "NPM006_PAYMENT_TERMS_ID_PK" PRIMARY KEY ("PAYMENT_TERMS_ID")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "NPM007" 
   (	"BANK_ID" NUMBER(9,0) GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"BANK_NAME" VARCHAR2(50 CHAR) NOT NULL ENABLE, 
	"USER_CREATED" VARCHAR2(50 CHAR) NOT NULL ENABLE, 
	"DATE_CREATED" DATE NOT NULL ENABLE, 
	"USER_UPDATE" VARCHAR2(50 CHAR), 
	"DATE_UPDATED" DATE, 
	"BANK_CODE" VARCHAR2(5 CHAR) NOT NULL ENABLE, 
	"BANK_ROUTE_NO" VARCHAR2(10 CHAR) NOT NULL ENABLE, 
	 CONSTRAINT "NPM007_BANK_ID_PK" PRIMARY KEY ("BANK_ID")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "NPM008" 
   (	"DENOMINATION_ID" NUMBER(9,0) GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"DENOMINATION_NAME" VARCHAR2(30 CHAR) NOT NULL ENABLE, 
	"VALUE" NUMBER(6,2) NOT NULL ENABLE, 
	"USER_CREATED" VARCHAR2(50 CHAR) NOT NULL ENABLE, 
	"DATE_CREATED" DATE NOT NULL ENABLE, 
	"USER_UPDATE" VARCHAR2(50 CHAR), 
	"DATE_UPDATED" DATE, 
	 CONSTRAINT "NPM008_DENOMINATION_ID_PK" PRIMARY KEY ("DENOMINATION_ID")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "NPM009" 
   (	"USER_ID" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"USER_NAME" VARCHAR2(50 CHAR) NOT NULL ENABLE, 
	"PASSWORD" VARCHAR2(100 CHAR) NOT NULL ENABLE, 
	"DATE_CREATED" DATE NOT NULL ENABLE, 
	"USER_UPDATE" VARCHAR2(50 CHAR), 
	"DATE_UPDATED" DATE, 
	"SALT" VARCHAR2(50), 
	"STATUS" VARCHAR2(1 CHAR) DEFAULT 'A' NOT NULL ENABLE, 
	"INVALID_LOGIN_TRIES" NUMBER(1,0) DEFAULT 0 NOT NULL ENABLE, 
	"LAST_LOCKED_DATE" DATE, 
	"NAME" VARCHAR2(50 CHAR) NOT NULL ENABLE, 
	"ROLE" VARCHAR2(50 CHAR), 
	 CONSTRAINT "NPM009_USER_ID_PK" PRIMARY KEY ("USER_ID")
  USING INDEX  ENABLE, 
	 CONSTRAINT "NPM009_USER_NAME_UNIQUE" UNIQUE ("USER_NAME")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "NPM010" 
   (	"ORGANIZATION_TYPE_ID" NUMBER(9,0) GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"ORGANIZATION_TYPE_NAME" VARCHAR2(50 CHAR) NOT NULL ENABLE, 
	"DESCRIPTION" VARCHAR2(200 CHAR), 
	"USER_CREATED" VARCHAR2(50 CHAR) NOT NULL ENABLE, 
	"DATE_CREATED" DATE NOT NULL ENABLE, 
	"USER_UPDATE" VARCHAR2(50 CHAR), 
	"DATE_UPDATED" DATE, 
	 CONSTRAINT "NPM010_PK" PRIMARY KEY ("ORGANIZATION_TYPE_ID")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "NPM011" 
   (	"MODULE_ID" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"SCREEN" VARCHAR2(50 CHAR) NOT NULL ENABLE, 
	"DESCRIPTION" VARCHAR2(200 CHAR), 
	"USER_CREATED" VARCHAR2(50 CHAR) NOT NULL ENABLE, 
	"DATE_CREATED" DATE NOT NULL ENABLE, 
	"USER_UPDATE" VARCHAR2(50 CHAR), 
	"DATE_UPDATED" DATE, 
	 CONSTRAINT "NPM011_MODULE_ID_PK" PRIMARY KEY ("MODULE_ID")
  USING INDEX  ENABLE, 
	 CONSTRAINT "NPM011_SCREEN_UNIQUE" UNIQUE ("SCREEN")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "NPM012" 
   (	"COMPONENT_ID" NUMBER(10,0) GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"COMPONENT_NAME" VARCHAR2(100 CHAR) NOT NULL ENABLE, 
	"MODULE_ID" NUMBER(10,0) NOT NULL ENABLE, 
	"DESCRIPTION" VARCHAR2(200 CHAR), 
	"USER_CREATED" VARCHAR2(50 CHAR) NOT NULL ENABLE, 
	"DATE_CREATED" DATE NOT NULL ENABLE, 
	"USER_UPDATE" VARCHAR2(50 CHAR), 
	"DATE_UPDATED" DATE, 
	 CONSTRAINT "NPM012_PK" PRIMARY KEY ("COMPONENT_ID")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "NPM013" 
   (	"GC_TYPE_ID" NUMBER(9,0) GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"GC_TYPE_CODE" VARCHAR2(3 CHAR) NOT NULL ENABLE, 
	"TYPE_NAME" VARCHAR2(20 CHAR) NOT NULL ENABLE, 
	"EXPIRY_DAYS" NUMBER(4,0) NOT NULL ENABLE, 
	"DONATION" VARCHAR2(1 CHAR) NOT NULL ENABLE, 
	"USER_CREATED" VARCHAR2(50 CHAR) NOT NULL ENABLE, 
	"DATE_CREATED" DATE NOT NULL ENABLE, 
	"UPDATE_USER" VARCHAR2(50 CHAR), 
	"DATE_UPDATED" DATE, 
	 CONSTRAINT "NPM013_PK" PRIMARY KEY ("GC_TYPE_ID")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "NPM014" 
   (	"GC_STATUS_ID" NUMBER(9,0) GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"GC_STATUS_NAME" VARCHAR2(12 CHAR) NOT NULL ENABLE, 
	"GC_STATUS_DESCRIPTION" VARCHAR2(50 CHAR) NOT NULL ENABLE, 
	"USER_CREATED" VARCHAR2(50 CHAR) NOT NULL ENABLE, 
	"DATE_CREATED" DATE NOT NULL ENABLE, 
	"UPDATE_USER" VARCHAR2(50 CHAR), 
	"DATE_UPDATED" DATE, 
	 CONSTRAINT "NPM014_PK" PRIMARY KEY ("GC_STATUS_ID")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "NPM015" 
   (	"COLLECTION_TYPE_ID" NUMBER(9,0) GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"COLLECTION_TYPE_NAME" VARCHAR2(20 CHAR) NOT NULL ENABLE, 
	"COLLECTION_TYPE_DESCRIPTION" VARCHAR2(100 CHAR), 
	"USER_CREATED" VARCHAR2(50 CHAR) NOT NULL ENABLE, 
	"DATE_CREATED" DATE NOT NULL ENABLE, 
	"USER_UPDATED" VARCHAR2(50 CHAR), 
	"DATE_UPDATED" DATE, 
	"COLLECTION_TYPE_CODE" VARCHAR2(1 CHAR) NOT NULL ENABLE, 
	 CONSTRAINT "NPM015_PK" PRIMARY KEY ("COLLECTION_TYPE_ID")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "NPM016" 
   (	"RESERVE_STATUS_ID" NUMBER(9,0) GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"STATUS_NAME" VARCHAR2(15 CHAR) NOT NULL ENABLE, 
	"DESCRIPTION" VARCHAR2(200 CHAR), 
	"USER_CREATED" VARCHAR2(50 CHAR) NOT NULL ENABLE, 
	"DATE_CREATED" DATE NOT NULL ENABLE, 
	"USER_UPDATED" VARCHAR2(50 CHAR), 
	"DATE_UPDATED" DATE, 
	 CONSTRAINT "NPM016_PK" PRIMARY KEY ("RESERVE_STATUS_ID")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "NPM017" 
   (	"CM_STATUS_ID" NUMBER(9,0) GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"CM_STATUS_NAME" VARCHAR2(12) NOT NULL ENABLE, 
	"CM_STATUS_DESCRIPTION" VARCHAR2(50) NOT NULL ENABLE, 
	"USER_CREATED" VARCHAR2(50) NOT NULL ENABLE, 
	"DATE_CREATED" DATE NOT NULL ENABLE, 
	"USER_UPDATE" VARCHAR2(50), 
	"DATE_UPDATED" DATE, 
	 CONSTRAINT "NPM017_PK" PRIMARY KEY ("CM_STATUS_ID")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "NPT001" 
   (	"INVOICE_ID" NUMBER(9,0) GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"CUSTOMER_ID" NUMBER(9,0), 
	"QUOTATION_ID" NUMBER(9,0), 
	"TAX_ID" NUMBER(9,0), 
	"DISCOUNT_ID" NUMBER(9,0), 
	"TOTAL_AMOUNT" NUMBER(9,2), 
	"USER_CREATED" VARCHAR2(50 CHAR) NOT NULL ENABLE, 
	"DATE_CREATED" DATE NOT NULL ENABLE, 
	"USER_UPDATE" VARCHAR2(50 CHAR), 
	"DATE_UPDATED" DATE, 
	"OUTSTANDING_BALANCE" NUMBER(9,2), 
	"SPECIAL_INSTRUCTIONS" VARCHAR2(1000), 
	"FOR_DELIVERY" VARCHAR2(1 CHAR), 
	"STATUS" VARCHAR2(20 CHAR), 
	"CUSTOMER_PO" NUMBER(12,0), 
	"ADDITIONAL_DISCOUNT_TYPE" NUMBER(7,0), 
	"ADDITIONAL_DISCOUNT_VALUE" NUMBER(5,2), 
	"ADDITIONAL_DISCOUNT_REASON" VARCHAR2(50 CHAR), 
	"SUB_TOTAL" NUMBER(9,2), 
	"TOTAL_DISCOUNT" NUMBER(9,2), 
	 CONSTRAINT "NPT001_INVOICE_ID_PK" PRIMARY KEY ("INVOICE_ID")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "NPT002" 
   (	"ITEM_INVOICE_ID" NUMBER(9,0) GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"INVOICE_ID" NUMBER(9,0), 
	"ITEM_ID" NUMBER, 
	"QUANTITY" NUMBER(6,0) NOT NULL ENABLE, 
	"USER_CREATED" VARCHAR2(50 CHAR) NOT NULL ENABLE, 
	"DATE_CREATED" DATE NOT NULL ENABLE, 
	"USER_UPDATE" VARCHAR2(50 CHAR), 
	"DATE_UPDATED" DATE, 
	"WAREHOUSE_ID" NUMBER NOT NULL ENABLE, 
	"ITEM_PRICE" NUMBER(7,2) NOT NULL ENABLE, 
	"DISCOUNTED_PRICE" NUMBER(7,2), 
	"UOM_ID" NUMBER NOT NULL ENABLE, 
	"CASH_INVOICE_ID" NUMBER(9,0), 
	"ITEM_NUM" VARCHAR2(20 CHAR), 
	"UOM_CODE" VARCHAR2(3 CHAR), 
	"BRAND_CODE" VARCHAR2(3 CHAR), 
	"ITEM_DESC" VARCHAR2(30 CHAR), 
	"DS" VARCHAR2(1 CHAR), 
	"DISCOUNT_VALUE" NUMBER(9,2), 
	 CONSTRAINT "NPT002_ITEM_INVOICE_ID_PK" PRIMARY KEY ("ITEM_INVOICE_ID")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "NPT003" 
   (	"CM_TRANSACTION_ID" NUMBER(9,0) GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"CREDIT_MEMO_ID" NUMBER(9,0) NOT NULL ENABLE, 
	"CM_BALANCE" NUMBER(9,2) NOT NULL ENABLE, 
	"USER_CREATED" VARCHAR2(50 CHAR) NOT NULL ENABLE, 
	"DATE_CREATED" DATE NOT NULL ENABLE, 
	"USER_UPDATE" VARCHAR2(50 CHAR), 
	"DATE_UPDATED" DATE, 
	"PAYMENT_ID" NUMBER(9,0), 
	"COLLECTION_ID" NUMBER(9,0), 
	 CONSTRAINT "NPT003_CM_TRANSACTION_ID_PK" PRIMARY KEY ("CM_TRANSACTION_ID")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "NPT004" 
   (	"PRINT_LOCATION_ID" NUMBER(9,0), 
	"INVOICE_ID" NUMBER(9,0), 
	 CONSTRAINT "NPT004_PK" PRIMARY KEY ("PRINT_LOCATION_ID", "INVOICE_ID")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "NPT005" 
   (	"COLLECTION_ID" NUMBER(9,0) GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"CREDIT_MEMO_ID" NUMBER(9,0), 
	"PAYMENT_ID" NUMBER, 
	"INVOICE_BALANCE" NUMBER(9,0), 
	"USER_CREATED" VARCHAR2(50 CHAR) NOT NULL ENABLE, 
	"DATE_CREATED" DATE NOT NULL ENABLE, 
	"USER_UPDATE" VARCHAR2(50 CHAR), 
	"DATE_UPDATED" DATE, 
	"REFERENCE_PO" NUMBER(12,0), 
	"COLLECTION_TYPE_ID" NUMBER(9,0), 
	"CASHCHECK" VARCHAR2(13 CHAR) NOT NULL ENABLE, 
	"DATE_PAID" DATE NOT NULL ENABLE, 
	"OR_NO" NUMBER(12,0), 
	"AMOUNT" NUMBER(9,2), 
	"POSTED" VARCHAR2(1), 
	 CONSTRAINT "NPT005_COLLECTION_ID_PK" PRIMARY KEY ("COLLECTION_ID")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "NPT006" 
   (	"QUOTATION_ID" NUMBER(9,0) GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"CUSTOMER_ID" NUMBER(9,0), 
	"TAX_ID" NUMBER(9,0), 
	"DISCOUNT_ID" NUMBER(9,0), 
	"TOTAL_AMOUNT" NUMBER(9,0), 
	"SUB_TOTAL" NUMBER(9,0), 
	"USER_CREATED" VARCHAR2(50 CHAR) NOT NULL ENABLE, 
	"DATE_CREATED" DATE NOT NULL ENABLE, 
	"USER_UPDATE" VARCHAR2(50 CHAR), 
	"DATE_UPDATED" DATE, 
	"STATUS" VARCHAR2(20 CHAR), 
	"CUSTOMER_PO" NUMBER(12,0), 
	"ADDITIONAL_DISCOUNT_TYPE" VARCHAR2(7 CHAR), 
	"ADDITIONAL_DISCOUNT_VALUE" NUMBER(5,2), 
	"ADDITIONAL_DISCOUNT_REASON" VARCHAR2(50 CHAR), 
	"TOTAL_DISCOUNT" NUMBER(9,2), 
	"SPECIAL_INSTRUCTIONS" VARCHAR2(100 CHAR), 
	"OUTSTANDING_BALANCE" NUMBER(9,2), 
	 CONSTRAINT "NPT006_QUOTATION_ID_PK" PRIMARY KEY ("QUOTATION_ID")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "NPT007" 
   (	"QUOTATION_ID" NUMBER(9,0), 
	"ITEM_ID" NUMBER(9,0), 
	"CREATE_USER" VARCHAR2(10 CHAR) NOT NULL ENABLE, 
	"CREATE_DATE" DATE NOT NULL ENABLE, 
	"UPDATE_USER" VARCHAR2(10 CHAR), 
	"UPDATE_DATE" DATE, 
	 CONSTRAINT "NPT007_PK" PRIMARY KEY ("QUOTATION_ID", "ITEM_ID")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "NPT008" 
   (	"DISCOUNT_ID" NUMBER(9,0) GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"TYPE" VARCHAR2(50 CHAR) NOT NULL ENABLE, 
	"DATE_FROM" DATE NOT NULL ENABLE, 
	"DATE_TO" DATE NOT NULL ENABLE, 
	"USER_CREATED" VARCHAR2(50 CHAR) NOT NULL ENABLE, 
	"DATE_CREATED" DATE NOT NULL ENABLE, 
	"USER_UPDATE" VARCHAR2(50 CHAR), 
	"DATE_UPDATED" DATE, 
	"CUSTOMER_ID" NUMBER(9,0), 
	"DS" VARCHAR2(1), 
	"DISCOUNT_CODE" VARCHAR2(8 CHAR) NOT NULL ENABLE, 
	"DISCOUNT_DESC" VARCHAR2(50 CHAR) NOT NULL ENABLE, 
	"CATEGORY" VARCHAR2(20 CHAR) NOT NULL ENABLE, 
	 CONSTRAINT "NPT008_DISCOUNT_ID_PK" PRIMARY KEY ("DISCOUNT_ID")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "NPT009" 
   (	"CUSTOMER_ID" NUMBER(9,0) GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"LEGAL_NAME" VARCHAR2(100 CHAR) NOT NULL ENABLE, 
	"USER_CREATED" VARCHAR2(50 CHAR) NOT NULL ENABLE, 
	"DATE_CREATED" DATE NOT NULL ENABLE, 
	"USER_UPDATE" VARCHAR2(50 CHAR), 
	"DATE_UPDATED" DATE, 
	"PAYMENT_INSTRUCTIONS" VARCHAR2(200 CHAR), 
	"BILLING_ADDRESS" VARCHAR2(100 CHAR), 
	"SHIPPING_CONTACTA" VARCHAR2(12 CHAR), 
	"SHIPPING_CONTACTB" VARCHAR2(12 CHAR), 
	"SHIPPING_EMAIL" VARCHAR2(50 CHAR), 
	"SHIPPING_INSTRUCTIONS" VARCHAR2(200 CHAR), 
	"OUTSTANDING_BALANCE" NUMBER(9,0), 
	"MAIN_ACCOUNT_CODE" VARCHAR2(100 CHAR), 
	"CUSTOMER_CODE" VARCHAR2(10 CHAR) NOT NULL ENABLE, 
	"DBA" VARCHAR2(100 CHAR) NOT NULL ENABLE, 
	"CONTACT_PERSON" VARCHAR2(80 CHAR) NOT NULL ENABLE, 
	"ORGANIZATION_TYPE_ID" NUMBER(9,0) NOT NULL ENABLE, 
	"CREDIT_LIMIT" NUMBER(9,2), 
	"ACCOUNT_TYPE_ID" NUMBER(9,0) NOT NULL ENABLE, 
	"SHIPPING_ADDRESS" VARCHAR2(100 CHAR), 
	"BILLING_CONTACTA" VARCHAR2(12 CHAR), 
	"BILLING_CONTACTB" VARCHAR2(12 CHAR), 
	"BILLING_EMAIL" VARCHAR2(50 CHAR), 
	"PAYMENT_TERMS_ID" NUMBER(9,0), 
	"SHIPPING_FAX" VARCHAR2(12 CHAR), 
	"BILLING_FAX" VARCHAR2(12 CHAR), 
	"CUSTOMER_INSTRUCTION" VARCHAR2(100 CHAR), 
	"STANDARD_DISCOUNT_VALUE" NUMBER(4,4), 
	 CONSTRAINT "NPT009_CUSTOMER_ID_PK" PRIMARY KEY ("CUSTOMER_ID")
  USING INDEX  ENABLE, 
	 CONSTRAINT "NPT009_CUSTOMER_CODE_UNIQUE" UNIQUE ("CUSTOMER_CODE")
  USING INDEX  ENABLE, 
	 CONSTRAINT "NPT009_DBA_UNIQUE" UNIQUE ("DBA")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "NPT010" 
   (	"COMPONENT_ID" NUMBER(10,0), 
	"USER_ID" NUMBER(10,0), 
	"USER_CREATED" VARCHAR2(50 CHAR) NOT NULL ENABLE, 
	"DATE_CREATED" DATE NOT NULL ENABLE, 
	"USER_UPDATE" VARCHAR2(50 CHAR), 
	"DATE_UPDATED" DATE, 
	 CONSTRAINT "NPT010_PK" PRIMARY KEY ("COMPONENT_ID", "USER_ID")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "NPT011" 
   (	"CUSTOMER_ID" NUMBER(9,0), 
	"DISCOUNT_ID" NUMBER(9,0), 
	"CREATE_USER" VARCHAR2(10 CHAR) NOT NULL ENABLE, 
	"CREATE_DATE" DATE NOT NULL ENABLE, 
	"UPDATE_USER" VARCHAR2(10 CHAR), 
	"UPDATE_DATE" DATE, 
	 CONSTRAINT "NPT011_PK" PRIMARY KEY ("CUSTOMER_ID", "DISCOUNT_ID")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "NPT012" 
   (	"DELIVERY_ID" NUMBER(9,0) GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"DELIVERY_MAN" VARCHAR2(50 CHAR), 
	"DELIVERY_DATE" DATE, 
	"USER_CREATED" VARCHAR2(50 CHAR) NOT NULL ENABLE, 
	"DATE_CREATED" DATE NOT NULL ENABLE, 
	"USER_UPDATE" VARCHAR2(50 CHAR), 
	"DATE_UPDATED" DATE, 
	"BATCH" NUMBER(2,0) NOT NULL ENABLE, 
	"CHECKER" VARCHAR2(20 CHAR) NOT NULL ENABLE, 
	"DEP_TIME" VARCHAR2(7 CHAR), 
	"ARV_TIME" VARCHAR2(7 CHAR), 
	"VAN_NO" VARCHAR2(7 CHAR), 
	"RECEIVED_BY" VARCHAR2(30 CHAR), 
	 CONSTRAINT "NPT012_DELIVERY_ID_PK" PRIMARY KEY ("DELIVERY_ID")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "NPT013" 
   (	"SOA_ID" NUMBER(9,0) GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"INVOICE_ID" NUMBER(9,0) NOT NULL ENABLE, 
	"LATEST_BALANCE" NUMBER(9,0) NOT NULL ENABLE, 
	"USER_CREATED" VARCHAR2(50 CHAR) NOT NULL ENABLE, 
	"DATE_CREATED" DATE NOT NULL ENABLE, 
	"USER_UPDATE" VARCHAR2(50 CHAR), 
	"DATE_UPDATED" DATE, 
	 CONSTRAINT "NPT013_SOA_ID_PK" PRIMARY KEY ("SOA_ID")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "NPT014" 
   (	"PAYMENT_METHOD_ID" NUMBER(9,0) NOT NULL ENABLE, 
	"AMOUNT" NUMBER(9,2) NOT NULL ENABLE, 
	"USER_CREATED" VARCHAR2(50 CHAR) NOT NULL ENABLE, 
	"DATE_CREATED" DATE NOT NULL ENABLE, 
	"USER_UPDATE" VARCHAR2(50 CHAR), 
	"DATE_UPDATED" DATE, 
	"CASH_INVOICE_ID" NUMBER(9,0), 
	"PAYMENT_ID" NUMBER(9,0) GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	 CONSTRAINT "NPT014_PAYMENT_ID_PK" PRIMARY KEY ("PAYMENT_ID")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "NPT015" 
   (	"CREDIT_MEMO_ID" NUMBER(9,0) GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"TOTAL_AMOUNT" NUMBER(9,2) NOT NULL ENABLE, 
	"CURRENT_BALANCE" NUMBER(9,2) NOT NULL ENABLE, 
	"USER_CREATED" VARCHAR2(50 CHAR) NOT NULL ENABLE, 
	"DATE_CREATED" DATE NOT NULL ENABLE, 
	"USER_UPDATE" VARCHAR2(50 CHAR), 
	"DATE_UPDATED" DATE, 
	"PAYMENT_METHOD_ID" NUMBER(9,0) NOT NULL ENABLE, 
	"POSTED_DATE" DATE NOT NULL ENABLE, 
	"CUSTOMER_ID" NUMBER(9,0) NOT NULL ENABLE, 
	"REASON" VARCHAR2(100 CHAR), 
	"CM_STATUS_ID" NUMBER(9,0), 
	"RETURN_ID" NUMBER(9,0), 
	 CONSTRAINT "NPT015_CREDIT_MEMO_ID_PK" PRIMARY KEY ("CREDIT_MEMO_ID")
  USING INDEX  ENABLE, 
	 CONSTRAINT "NPT015_RETURN_ID_UNIQUE" UNIQUE ("RETURN_ID")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "NPT016" 
   (	"REFUND_ID" NUMBER(9,0) GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"TOTAL_AMOUNT" NUMBER(9,2) NOT NULL ENABLE, 
	"TOTAL_QUANTITY" NUMBER(9,0) NOT NULL ENABLE, 
	"REASON" VARCHAR2(200 CHAR) NOT NULL ENABLE, 
	"USER_CREATED" VARCHAR2(50 CHAR) NOT NULL ENABLE, 
	"DATE_CREATED" DATE NOT NULL ENABLE, 
	"USER_UPDATE" VARCHAR2(50 CHAR), 
	"DATE_UPDATED" DATE, 
	 CONSTRAINT "NPT016_REFUND_ID_PK" PRIMARY KEY ("REFUND_ID")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "NPT018" 
   (	"RESERVE_ID" NUMBER(9,0) GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"CUSTOMER_ID" NUMBER(9,0), 
	"EXPIRY_DATE" DATE NOT NULL ENABLE, 
	"DESCRIPTION" VARCHAR2(200 CHAR) NOT NULL ENABLE, 
	"USER_CREATED" VARCHAR2(50 CHAR) NOT NULL ENABLE, 
	"DATE_CREATED" DATE NOT NULL ENABLE, 
	"USER_UPDATE" VARCHAR2(50 CHAR), 
	"DATE_UPDATED" DATE, 
	"POINT_PERSON" VARCHAR2(40 CHAR), 
	"TEL_NUMBER" VARCHAR2(12 CHAR) NOT NULL ENABLE, 
	"FAX" VARCHAR2(12 CHAR), 
	"EMAIL" VARCHAR2(50 CHAR), 
	"RESERVE_STATUS_ID" NUMBER(9,0), 
	"TOTAL_DISCOUNT" NUMBER(9,2), 
	"TOTAL_AMOUNT" NUMBER(9,2), 
	 CONSTRAINT "NPT018_RESERVE_ID_PK" PRIMARY KEY ("RESERVE_ID")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "NPT019" 
   (	"RESERVE_ITEM_ID" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"ITEM_ID" NUMBER NOT NULL ENABLE, 
	"RESERVE_ID" NUMBER(9,0) NOT NULL ENABLE, 
	"WAREHOUSE_ID" NUMBER NOT NULL ENABLE, 
	"UOM_ID" NUMBER NOT NULL ENABLE, 
	"ITEM_NUM" VARCHAR2(10 CHAR), 
	"BRAND_CODE" VARCHAR2(3 CHAR), 
	"ITEM_DESC" VARCHAR2(30 CHAR), 
	"UOM_CODE" VARCHAR2(3 CHAR), 
	"DT" VARCHAR2(1 CHAR), 
	"ITEM_PRICE" NUMBER(7,2) NOT NULL ENABLE, 
	"DISCOUNT_VALUE" NUMBER(9,2), 
	"DISCOUNTED_PRICE" NUMBER(7,2), 
	"QUANTITY" NUMBER(6,0) NOT NULL ENABLE, 
	"USER_CREATED" VARCHAR2(50 CHAR) NOT NULL ENABLE, 
	"DATE_CREATED" DATE NOT NULL ENABLE, 
	"USER_UPDATED" VARCHAR2(50 CHAR), 
	"DATE_UPDATED" DATE, 
	 CONSTRAINT "NPT019_PK" PRIMARY KEY ("RESERVE_ITEM_ID")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "NPT020" 
   (	"GIFT_CERTIFICATE_ID" NUMBER(9,0) GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"GC_TYPE_ID" NUMBER(9,0) NOT NULL ENABLE, 
	"BALANCE" NUMBER(7,2) NOT NULL ENABLE, 
	"AMOUNT" NUMBER(7,2) NOT NULL ENABLE, 
	"ISSUE_DATE" DATE NOT NULL ENABLE, 
	"EXPIRY_DATE" DATE NOT NULL ENABLE, 
	"DESCRIPTION_1" VARCHAR2(32 CHAR) NOT NULL ENABLE, 
	"DESCRIPTION_2" VARCHAR2(20 CHAR), 
	"THIS_ENTITLES" VARCHAR2(50 CHAR), 
	"REMARKS" VARCHAR2(50 CHAR), 
	"BEST_WISHES" VARCHAR2(50 CHAR), 
	"USER_CREATED" VARCHAR2(50 CHAR) NOT NULL ENABLE, 
	"DATE_CREATED" DATE NOT NULL ENABLE, 
	"USER_UPDATE" VARCHAR2(50 CHAR), 
	"DATE_UPDATED" DATE, 
	"EVENT" VARCHAR2(50 CHAR), 
	"PRINT_DATE" DATE, 
	"RELEASE_DATE" DATE, 
	"GC_STATUS_ID" NUMBER(9,0) NOT NULL ENABLE, 
	"RECIPIENT" VARCHAR2(50 CHAR), 
	"REDEEMED_DATE" DATE, 
	"PRINT_ID" NUMBER, 
	"INVOICE_ID" NUMBER(9,0), 
	"CASH_INVOICE_ID" NUMBER(9,0), 
	 CONSTRAINT "NPT020_GIFT_CERTIFICATE_BATCH_ID_PK" PRIMARY KEY ("GIFT_CERTIFICATE_ID")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "NPT021" 
   (	"GIFT_CERTIFICATE_PAYMENT_ID" NUMBER(9,0) GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"GIFT_CERTIFICATE_ID" NUMBER(9,0) NOT NULL ENABLE, 
	"PAYMENT_ID" NUMBER(9,0) NOT NULL ENABLE, 
	"USER_CREATED" VARCHAR2(50 CHAR) NOT NULL ENABLE, 
	"DATE_CREATED" DATE NOT NULL ENABLE, 
	"USER_UPDATE" VARCHAR2(50 CHAR), 
	"DATE_UPDATED" DATE, 
	"PAYMENT_METHOD_ID" NUMBER(9,0) NOT NULL ENABLE, 
	 CONSTRAINT "NPT021_GIFT_CERTIFICATE_ID_PK" PRIMARY KEY ("GIFT_CERTIFICATE_PAYMENT_ID")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "NPT022" 
   (	"CHECK_ID" NUMBER(9,0) GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"CUSTOMER_ID" NUMBER(9,0) NOT NULL ENABLE, 
	"BANK_ID" NUMBER(9,0) NOT NULL ENABLE, 
	"CHECK_NUMBER" NUMBER(12,0) NOT NULL ENABLE, 
	"AMOUNT" NUMBER(9,2) NOT NULL ENABLE, 
	"USER_CREATED" VARCHAR2(50 CHAR) NOT NULL ENABLE, 
	"DATE_CREATED" DATE NOT NULL ENABLE, 
	"USER_UPDATE" VARCHAR2(50 CHAR), 
	"DATE_UPDATED" DATE, 
	"PAYMENT_METHOD_ID" NUMBER(9,0) NOT NULL ENABLE, 
	"CHECK_STATUS" VARCHAR2(50 CHAR) NOT NULL ENABLE, 
	"CHECK_DATE" DATE NOT NULL ENABLE, 
	 CONSTRAINT "NPT022_CHECK_ID_PK" PRIMARY KEY ("CHECK_ID")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "NPT023" 
   (	"CASHIER_FUND" NUMBER(9,0) GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"CASH_COUNT_ID" NUMBER(9,0), 
	"OPENING_CASH_AMOUNT" NUMBER(9,2) NOT NULL ENABLE, 
	"CLOSING_CASH_AMOUNT" NUMBER(9,2), 
	"NON_CASH_AMOUNT" NUMBER(9,2), 
	"DIFFERENCE_AMOUNT" NUMBER(9,2), 
	"USER_CREATED" VARCHAR2(50 CHAR) NOT NULL ENABLE, 
	"DATE_CREATED" DATE NOT NULL ENABLE, 
	"USER_UPDATE" VARCHAR2(50 CHAR), 
	"DATE_UPDATED" DATE, 
	 CONSTRAINT "NPT023_CASHIER_FUND_PK" PRIMARY KEY ("CASHIER_FUND")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "NPT024" 
   (	"CASH_COUNT_ID" NUMBER(9,0) GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"DENOMINATION_ID" NUMBER(9,0), 
	"QUANTITY" NUMBER(6,0), 
	"TOTAL_NUMBER" NUMBER(12,0) NOT NULL ENABLE, 
	"USER_CREATED" VARCHAR2(50 CHAR) NOT NULL ENABLE, 
	"DATE_CREATED" DATE NOT NULL ENABLE, 
	"USER_UPDATE" VARCHAR2(50 CHAR), 
	"DATE_UPDATED" DATE, 
	 CONSTRAINT "NPT024_CASH_COUNT_ID_PK" PRIMARY KEY ("CASH_COUNT_ID")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "NPT028" 
   (	"DISCOUNT_ID" NUMBER(9,0) NOT NULL ENABLE, 
	"SIC_ID" NUMBER NOT NULL ENABLE, 
	"DISCOUNT_SUBCATEGORY_SIC" NUMBER(9,0) GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"SIC_NAME" VARCHAR2(50 CHAR) NOT NULL ENABLE, 
	"DISCOUNT_VALUE" NUMBER(9,2) NOT NULL ENABLE, 
	 CONSTRAINT "NPT028_PK" PRIMARY KEY ("DISCOUNT_SUBCATEGORY_SIC")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "NPT029" 
   (	"DISCOUNT_ID" NUMBER(9,0) NOT NULL ENABLE, 
	"DEPT_ID" NUMBER NOT NULL ENABLE, 
	"DISCOUNT_SUBCATEGORY_DEPT" NUMBER(9,0) GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"DEPT_NAME" VARCHAR2(50 CHAR) NOT NULL ENABLE, 
	"DISCOUNT_VALUE" NUMBER(9,2) NOT NULL ENABLE, 
	 CONSTRAINT "NPT029_PK" PRIMARY KEY ("DISCOUNT_SUBCATEGORY_DEPT")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "NPT030" 
   (	"DISCOUNT_ID" NUMBER(9,0) NOT NULL ENABLE, 
	"CLASS_ID" NUMBER NOT NULL ENABLE, 
	"DISCOUNT_SUBCATEGORY_CLASS" NUMBER(9,0) GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"CLASS_NAME" VARCHAR2(50 CHAR) NOT NULL ENABLE, 
	"DISCOUNT_VALUE" NUMBER(9,2) NOT NULL ENABLE, 
	 CONSTRAINT "NPT030_PK" PRIMARY KEY ("DISCOUNT_SUBCATEGORY_CLASS")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "NPT031" 
   (	"DELIVERY_INVOICE_ID" NUMBER(9,0) GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"DELIVERY_ID" NUMBER(9,0) NOT NULL ENABLE, 
	"INVOICE_ID" NUMBER(9,0), 
	"INVOICE_DELIVERY" VARCHAR2(100 CHAR), 
	"DBA_DELIVERY" VARCHAR2(100 CHAR), 
	"DEP_TIME" VARCHAR2(7 CHAR), 
	"ARV_TIME" VARCHAR2(7 CHAR), 
	"USER_CREATED" VARCHAR2(50 CHAR) NOT NULL ENABLE, 
	"DATE_CREATED" DATE NOT NULL ENABLE, 
	"USER_UPDATED" VARCHAR2(50 CHAR), 
	"DATE_UPDATED" DATE, 
	 CONSTRAINT "NPT031_PK" PRIMARY KEY ("DELIVERY_INVOICE_ID")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "NPT032" 
   (	"CUSTOMER_ID" NUMBER(9,0) NOT NULL ENABLE, 
	"DISCOUNT_ID" NUMBER(9,0) NOT NULL ENABLE, 
	"ACTIVE" VARCHAR2(1 CHAR) NOT NULL ENABLE, 
	"USER_CREATED" VARCHAR2(50 CHAR) NOT NULL ENABLE, 
	"DATE_CREATED" DATE NOT NULL ENABLE, 
	"USER_UPDATE" VARCHAR2(50 CHAR), 
	"DATE_UPDATED" DATE
   ) ;

  CREATE TABLE "NPT033" 
   (	"CASH_INVOICE_ID" NUMBER(9,0) GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"CUSTOMER_ID" NUMBER(9,0) NOT NULL ENABLE, 
	"TOTAL_AMOUNT" NUMBER(9,2), 
	"FOR_DELIVERY" VARCHAR2(1 CHAR), 
	"TAX_ID" NUMBER(9,0), 
	"DISCOUNT_ID" NUMBER(9,0), 
	"SUB_TOTAL" NUMBER(9,2), 
	"TOTAL_DISCOUNT" NUMBER(9,2), 
	"USER_CREATED" VARCHAR2(50 CHAR) NOT NULL ENABLE, 
	"DATE_CREATED" DATE NOT NULL ENABLE, 
	"USER_UPDATE" VARCHAR2(50 CHAR), 
	"DATE_UPDATED" DATE, 
	 CONSTRAINT "NPT033_PK" PRIMARY KEY ("CASH_INVOICE_ID")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "NPT034" 
   (	"CARD_ID_TRANSACTION" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"AMOUNT" NUMBER(9,2) NOT NULL ENABLE, 
	"LAST_4_DIGITS" NUMBER(4,0) NOT NULL ENABLE, 
	"AUTH_CODE" NUMBER(20,0) NOT NULL ENABLE, 
	"CARD_TYPE" VARCHAR2(20 CHAR) NOT NULL ENABLE, 
	"CARD_ISSUER" VARCHAR2(30 CHAR) NOT NULL ENABLE, 
	"USER_CREATED" VARCHAR2(50 CHAR) NOT NULL ENABLE, 
	"DATE_CREATED" DATE NOT NULL ENABLE, 
	 CONSTRAINT "NPM034_PK" PRIMARY KEY ("CARD_ID_TRANSACTION")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "NPT035" 
   (	"ITEM_INVOICE_ID" NUMBER(9,0) NOT NULL ENABLE, 
	"REFUND_ID" NUMBER(9,0), 
	"REFUNDABLE_QUANTITY" NUMBER(9,0) NOT NULL ENABLE, 
	"REFUND_QUANTITY" NUMBER(9,0), 
	"REFUND_TO_ITEM" NUMBER(9,0) GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"USER_CREATED" VARCHAR2(50 CHAR) NOT NULL ENABLE, 
	 CONSTRAINT "NPT035_REFUND_TO_ITEM_PK" PRIMARY KEY ("REFUND_TO_ITEM")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "NPT036" 
   (	"RESERVATION_UPDATE_ID" NUMBER(9,0) GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"RESERVE_ID" NUMBER(9,0) NOT NULL ENABLE, 
	"RESERVE_ITEM_ID" NUMBER(9,0), 
	"UPDATED" VARCHAR2(20 CHAR) NOT NULL ENABLE, 
	"USER_CREATED" VARCHAR2(50 CHAR) NOT NULL ENABLE, 
	"DATE_CREATED" DATE NOT NULL ENABLE, 
	 CONSTRAINT "NPT036_PK" PRIMARY KEY ("RESERVATION_UPDATE_ID")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "NPT037" 
   (	"ITEM_INVOICE_ID" NUMBER(9,0) NOT NULL ENABLE, 
	"RETURNABLE_QUANTITY" NUMBER(9,0) NOT NULL ENABLE, 
	"RETURN_QUANTITY" NUMBER(9,0), 
	"RETURN_TO_ITEM" NUMBER(9,0) GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"USER_CREATED" VARCHAR2(50 CHAR) NOT NULL ENABLE, 
	"RETURN_ID" NUMBER(9,0), 
	 CONSTRAINT "NPT037_RETURN_TO_ITEM_PK" PRIMARY KEY ("RETURN_TO_ITEM")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "NPT038" 
   (	"COLLECTION_ID" NUMBER(9,0) NOT NULL ENABLE, 
	"INVOICE_ID" NUMBER(9,0) NOT NULL ENABLE, 
	"AMOUNT_PAID" NUMBER(9,2) NOT NULL ENABLE, 
	"USER_CREATED" VARCHAR2(50 CHAR) NOT NULL ENABLE, 
	"DATE_CREATED" DATE NOT NULL ENABLE, 
	"USER_UPDATED" VARCHAR2(50 CHAR), 
	"DATE_UPDATED" DATE, 
	 CONSTRAINT "NPT038_PK" PRIMARY KEY ("COLLECTION_ID", "INVOICE_ID")
  USING INDEX  ENABLE
   ) ;

  ALTER TABLE "NPT033" ADD CONSTRAINT "NPT033_CUSTOMER_ID_FK" FOREIGN KEY ("CUSTOMER_ID")
	  REFERENCES "NPT009" ("CUSTOMER_ID") ENABLE;
  ALTER TABLE "NPT033" ADD CONSTRAINT "NPT033_TAX_ID_FK" FOREIGN KEY ("TAX_ID")
	  REFERENCES "NPM002" ("TAX_ID") ENABLE;
  ALTER TABLE "NPT033" ADD CONSTRAINT "NPT033_DISCOUNT_ID_FK" FOREIGN KEY ("DISCOUNT_ID")
	  REFERENCES "NPT008" ("DISCOUNT_ID") ENABLE;

   COMMENT ON TABLE "NPT033"  IS 'Invoice Cash';

   COMMENT ON TABLE "NPM015"  IS 'collection type';

  ALTER TABLE "NIT022" ADD CONSTRAINT "NIT022_ITEM_ID_FK" FOREIGN KEY ("ITEM_ID")
	  REFERENCES "NIT001" ("ITEM_ID") ENABLE;
  ALTER TABLE "NIT022" ADD CONSTRAINT "NIT022_WAREHOUSE_ID_FK" FOREIGN KEY ("WAREHOUSE_ID")
	  REFERENCES "NIM027" ("WAREHOUSE_ID") ENABLE;

   COMMENT ON TABLE "NIT022"  IS 'Item Transaction Map';

  ALTER TABLE "NIT024" ADD CONSTRAINT "NIT024_PO_ID_FK" FOREIGN KEY ("PO_ID")
	  REFERENCES "NIT012" ("PO_ID") ENABLE;

   COMMENT ON TABLE "NIT024"  IS 'Incoming Shipment PO';

  ALTER TABLE "NIT025" ADD CONSTRAINT "NIT025_PO_ID_FK" FOREIGN KEY ("PO_ID")
	  REFERENCES "NIT024" ("PO_ID") ENABLE;
  ALTER TABLE "NIT025" ADD CONSTRAINT "NIT025_ITEM_ID_FK" FOREIGN KEY ("ITEM_ID")
	  REFERENCES "NIT001" ("ITEM_ID") ENABLE;
  ALTER TABLE "NIT025" ADD CONSTRAINT "NIT025_EUOM_ID_FK" FOREIGN KEY ("EXTERNAL_UOM_ID")
	  REFERENCES "NIM026" ("UOM_ID") ENABLE;
  ALTER TABLE "NIT025" ADD CONSTRAINT "NIT025_IUOM_ID_FK" FOREIGN KEY ("INTERNAL_UOM_ID")
	  REFERENCES "NIM026" ("UOM_ID") ENABLE;

  ALTER TABLE "NIT035" ADD CONSTRAINT "NIT035_SVP_ID" FOREIGN KEY ("SVP_ID")
	  REFERENCES "NIT015" ("SVP_ID") ENABLE;
  ALTER TABLE "NIT035" ADD CONSTRAINT "NIT035_INVOICE_ID_FK" FOREIGN KEY ("INVOICE_ID")
	  REFERENCES "NIT036" ("INVOICE_ID") ENABLE;

   COMMENT ON COLUMN "NIT035"."SVP_ID" IS 'SVP ID from NIT035';
   COMMENT ON COLUMN "NIT035"."INVOICE_ID" IS 'Invoice ID from NIT036';
   COMMENT ON TABLE "NIT035"  IS 'Purchase Order Invoice';

  CREATE OR REPLACE EDITIONABLE TRIGGER "NIT035_AUDIT" 
before
insert or update on "NIT035"
for each row
begin
    if inserting then
        :new.create_date := SYSDATE;
        :new.create_user := NVL(v('APP_USER'), USER);
        -- :new.create_user := 'TEST';
    end if;

    :new.update_user := NVL(v('APP_USER'), USER);
    -- :new.update_user := 'TEST';
    :new.update_date := SYSDATE;
end;
/
ALTER TRIGGER "NIT035_AUDIT" ENABLE;

   COMMENT ON TABLE "NIT036"  IS 'Invoice';

  CREATE OR REPLACE EDITIONABLE TRIGGER "NIT036_AUDIT" 
before
insert or update on "NIT036"
for each row
begin
    if inserting then
        :new.create_date := SYSDATE;
        -- :new.create_user := NVL(v('APP_USER'), USER);
        :new.create_user := 'TEST';
    end if;

    -- :new.update_user := NVL(v('APP_USER'), USER);
    :new.update_user := 'TEST';
    :new.update_date := SYSDATE;
end;
/
ALTER TRIGGER "NIT036_AUDIT" ENABLE;

  ALTER TABLE "NIT014" ADD CONSTRAINT "NIT014_NOTE_ID_FK" FOREIGN KEY ("NOTE_ID")
	  REFERENCES "NIM030" ("NOTE_ID") ENABLE;
  ALTER TABLE "NIT014" ADD CONSTRAINT "NIT014_OE_ID_FK" FOREIGN KEY ("OPENING_EMAIL_ID")
	  REFERENCES "NIM033" ("OPENING_EMAIL_ID") ENABLE;
  ALTER TABLE "NIT014" ADD CONSTRAINT "NIT014_CE_ID_FK" FOREIGN KEY ("CLOSING_EMAIL_ID")
	  REFERENCES "NIM034" ("CLOSING_EMAIL_ID") ENABLE;
  ALTER TABLE "NIT014" ADD CONSTRAINT "NIT014_PO_ID_FK" FOREIGN KEY ("PO_ID")
	  REFERENCES "NIT012" ("PO_ID") ENABLE;

   COMMENT ON TABLE "NPT034"  IS 'Credit Card';

   COMMENT ON TABLE "NIM032"  IS 'Pricing Type';

  ALTER TABLE "NIT001" ADD CONSTRAINT "NIT001_BRAND_ID_PK" FOREIGN KEY ("BRAND_ID")
	  REFERENCES "NIM022" ("BRAND_ID") ENABLE;
  ALTER TABLE "NIT001" ADD CONSTRAINT "NIT001_CLASS_ID_FK" FOREIGN KEY ("CLASS_ID")
	  REFERENCES "NIM025" ("CLASS_ID") ENABLE;
  ALTER TABLE "NIT001" ADD CONSTRAINT "NIT001_DEPT_ID_FK" FOREIGN KEY ("DEPT_ID")
	  REFERENCES "NIM024" ("DEPT_ID") ENABLE;
  ALTER TABLE "NIT001" ADD CONSTRAINT "NIT001_SIC_ID_FK" FOREIGN KEY ("SIC_ID")
	  REFERENCES "NIM023" ("SIC_ID") ENABLE;

  CREATE INDEX "NIT001_I1" ON "NIT001" ("BRAND_ID") 
  ;

  CREATE INDEX "NIT001_I2" ON "NIT001" ("SIC_ID") 
  ;

  CREATE INDEX "NIT001_I3" ON "NIT001" ("DEPT_ID") 
  ;

  CREATE INDEX "NIT001_I4" ON "NIT001" ("CLASS_ID") 
  ;

  ALTER TABLE "NIT002" ADD CONSTRAINT "NIT002_UOM_ID_FK" FOREIGN KEY ("UOM_ID")
	  REFERENCES "NIM026" ("UOM_ID") ENABLE;
  ALTER TABLE "NIT002" ADD CONSTRAINT "NIT002_ITEM_ID_FK" FOREIGN KEY ("ITEM_ID")
	  REFERENCES "NIT001" ("ITEM_ID") ENABLE;

  ALTER TABLE "NIT003" ADD CONSTRAINT "NIT003_ITEM_ID_FK" FOREIGN KEY ("ITEM_ID")
	  REFERENCES "NIT001" ("ITEM_ID") ENABLE;

  CREATE INDEX "NIT003_I1" ON "NIT003" ("ITEM_ID") 
  ;

  ALTER TABLE "NIT004" ADD CONSTRAINT "NIT004_ITEM_ID_FK" FOREIGN KEY ("ITEM_ID")
	  REFERENCES "NIT001" ("ITEM_ID") ENABLE;
  ALTER TABLE "NIT004" ADD CONSTRAINT "NIT004_WAREHOUSE_ID_FK" FOREIGN KEY ("WAREHOUSE_ID")
	  REFERENCES "NIM027" ("WAREHOUSE_ID") ENABLE;
  ALTER TABLE "NIT004" ADD CONSTRAINT "NIT004_UOM_ID_FK" FOREIGN KEY ("UOM_ID")
	  REFERENCES "NIM026" ("UOM_ID") ENABLE;

  ALTER TABLE "NIT005" ADD CONSTRAINT "NIT005_ITEM_ID_FK" FOREIGN KEY ("ITEM_ID")
	  REFERENCES "NIT001" ("ITEM_ID") ENABLE;
  ALTER TABLE "NIT005" ADD CONSTRAINT "NIT005_QTY_REASON_ID_FK" FOREIGN KEY ("QTY_REASON_ID")
	  REFERENCES "NIM028" ("QTY_REASON_ID") ENABLE;
  ALTER TABLE "NIT005" ADD CONSTRAINT "NIT005_UOM_ID_FK" FOREIGN KEY ("UOM_ID")
	  REFERENCES "NIM026" ("UOM_ID") ENABLE;
  ALTER TABLE "NIT005" ADD CONSTRAINT "NIT005_WAREHOUSE_ID_FK" FOREIGN KEY ("WAREHOUSE_ID")
	  REFERENCES "NIM027" ("WAREHOUSE_ID") ENABLE;

  CREATE INDEX "NIT005_I1" ON "NIT005" ("ITEM_ID") 
  ;

  CREATE INDEX "NIT005_I2" ON "NIT005" ("QTY_REASON_ID") 
  ;

  ALTER TABLE "NIT007" ADD CONSTRAINT "NIT007_ITEM_ID_FK" FOREIGN KEY ("ITEM_ID")
	  REFERENCES "NIT001" ("ITEM_ID") ENABLE;
  ALTER TABLE "NIT007" ADD CONSTRAINT "NIT007_VENDOR_ID_PK" FOREIGN KEY ("VENDOR_ID")
	  REFERENCES "NIT006" ("VENDOR_ID") ENABLE;

  ALTER TABLE "NIT008" ADD CONSTRAINT "NIT008_VENDOR_ID_PK" FOREIGN KEY ("VENDOR_ID")
	  REFERENCES "NIT006" ("VENDOR_ID") ENABLE;

  CREATE INDEX "NIT008_I1" ON "NIT008" ("VENDOR_ID") 
  ;

  ALTER TABLE "NIT009" ADD CONSTRAINT "NIT009_ADDRESS_TYPE_ID_FK" FOREIGN KEY ("ADDRESS_TYPE_ID")
	  REFERENCES "NIM029" ("ADDRESS_TYPE_ID") ENABLE;
  ALTER TABLE "NIT009" ADD CONSTRAINT "NIT009_VENDOR_ID_FK" FOREIGN KEY ("VENDOR_ID")
	  REFERENCES "NIT006" ("VENDOR_ID") ENABLE;

  ALTER TABLE "NIT010" ADD CONSTRAINT "NIT010_FROMWH_FK" FOREIGN KEY ("FROMWAREHOUSE_ID")
	  REFERENCES "NIM027" ("WAREHOUSE_ID") ENABLE;
  ALTER TABLE "NIT010" ADD CONSTRAINT "NIT010_TOWH_FK" FOREIGN KEY ("TOWAREHOUSE_ID")
	  REFERENCES "NIM027" ("WAREHOUSE_ID") ENABLE;

  ALTER TABLE "NIT011" ADD CONSTRAINT "NIT011_TRANSFER_ID_FK" FOREIGN KEY ("TRANSFER_ID")
	  REFERENCES "NIT010" ("TRANSFER_ID") ENABLE;
  ALTER TABLE "NIT011" ADD CONSTRAINT "NIT011_ITEM_ID_FK" FOREIGN KEY ("ITEM_ID")
	  REFERENCES "NIT001" ("ITEM_ID") ENABLE;
  ALTER TABLE "NIT011" ADD CONSTRAINT "NIT011_UOM_ID_FK" FOREIGN KEY ("UOM_ID")
	  REFERENCES "NIM026" ("UOM_ID") ENABLE;

  ALTER TABLE "NIT012" ADD CONSTRAINT "NIT012_VENDOR_ID_FK" FOREIGN KEY ("VENDOR_ID")
	  REFERENCES "NIT006" ("VENDOR_ID") ENABLE;
  ALTER TABLE "NIT012" ADD CONSTRAINT "NIT012_PRICING_TYPE_ID_FK" FOREIGN KEY ("PRICING_TYPE_ID")
	  REFERENCES "NIM032" ("PRICING_TYPE_ID") ENABLE;
  ALTER TABLE "NIT012" ADD CONSTRAINT "NIT012_PARENT_PO_ID_FK" FOREIGN KEY ("PARENT_PO_ID")
	  REFERENCES "NIT012" ("PO_ID") ENABLE;

  CREATE INDEX "NIT012_I1" ON "NIT012" ("VENDOR_ID") 
  ;

  ALTER TABLE "NIT013" ADD CONSTRAINT "NIT013_ITEM_ID_FK" FOREIGN KEY ("ITEM_ID")
	  REFERENCES "NIT001" ("ITEM_ID") ENABLE;
  ALTER TABLE "NIT013" ADD CONSTRAINT "NIT013_IUOM_ID_FK" FOREIGN KEY ("INTERNAL_UOM_ID")
	  REFERENCES "NIM026" ("UOM_ID") ENABLE;
  ALTER TABLE "NIT013" ADD CONSTRAINT "NIT013_EUOM_ID_FK" FOREIGN KEY ("EXTERNAL_UOM_ID")
	  REFERENCES "NIM026" ("UOM_ID") ENABLE;
  ALTER TABLE "NIT013" ADD CONSTRAINT "NIT013_PO_ID_FK" FOREIGN KEY ("PO_ID")
	  REFERENCES "NIT012" ("PO_ID") ENABLE;

  ALTER TABLE "NIT015" ADD CONSTRAINT "NIT015_SHIPMENT_ID_FK" FOREIGN KEY ("SHIPMENT_ID")
	  REFERENCES "NIT016" ("SHIPMENT_ID") ENABLE;
  ALTER TABLE "NIT015" ADD CONSTRAINT "NIT015_PO_ID_FK" FOREIGN KEY ("PO_ID")
	  REFERENCES "NIT012" ("PO_ID") ENABLE;

  CREATE OR REPLACE EDITIONABLE TRIGGER "NIT015_AUDIT" 
before
insert or update on "NIT015"
for each row
begin
    if inserting then
        :new.create_date := SYSDATE;
        :new.create_user := NVL(v('APP_USER'), USER);
    end if;

    :new.update_user := NVL(v('APP_USER'), USER);
    :new.update_date := SYSDATE;
end;
/
ALTER TRIGGER "NIT015_AUDIT" ENABLE;

  ALTER TABLE "NIT016" ADD CONSTRAINT "NIT016_WAREHOUSE_ID" FOREIGN KEY ("WAREHOUSE_ID")
	  REFERENCES "NIM027" ("WAREHOUSE_ID") ENABLE;

  CREATE OR REPLACE EDITIONABLE TRIGGER "NIT016_AUDIT" 
before
insert or update on "NIT016"
for each row
begin
    if inserting then
        :new.create_date := SYSDATE;
        :new.create_user := NVL(v('APP_USER'), USER);
    end if;

    :new.update_user := NVL(v('APP_USER'), USER);
    :new.update_date := SYSDATE;
end;
/
ALTER TRIGGER "NIT016_AUDIT" ENABLE;

  ALTER TABLE "NIT017" ADD CONSTRAINT "NIT017_SHIPMENT_ID_FK" FOREIGN KEY ("SHIPMENT_ID")
	  REFERENCES "NIT016" ("SHIPMENT_ID") ENABLE;
  ALTER TABLE "NIT017" ADD CONSTRAINT "NIT017_AP_ID_FK" FOREIGN KEY ("AP_ID")
	  REFERENCES "NIT019" ("AP_ID") ENABLE;

  CREATE OR REPLACE EDITIONABLE TRIGGER "NIT017_AUDIT" 
before
insert or update on "NIT017"
for each row
begin
    if inserting then
        :new.create_date := SYSDATE;
        :new.create_user := NVL(v('APP_USER'), USER);
    end if;

    :new.update_user := NVL(v('APP_USER'), USER);
    :new.update_date := SYSDATE;
end;
/
ALTER TRIGGER "NIT017_AUDIT" ENABLE;

  ALTER TABLE "NIT018" ADD CONSTRAINT "NIT018_ITEM_ID_PK" FOREIGN KEY ("ITEM_ID")
	  REFERENCES "NIT001" ("ITEM_ID") ENABLE;
  ALTER TABLE "NIT018" ADD CONSTRAINT "NIT018_PO_ID" FOREIGN KEY ("PO_ID")
	  REFERENCES "NIT012" ("PO_ID") ENABLE;

   COMMENT ON TABLE "NIT018"  IS 'SHIPMENT ITEMS';

  CREATE OR REPLACE EDITIONABLE TRIGGER "NIT018_AUDIT" 
before
insert or update on "NIT018"
for each row
begin
    if inserting then
        :new.create_date := SYSDATE;
        :new.create_user := NVL(v('APP_USER'), USER);
    end if;

    :new.update_user := NVL(v('APP_USER'), USER);
    :new.update_date := SYSDATE;
end;
/
ALTER TRIGGER "NIT018_AUDIT" ENABLE;

  ALTER TABLE "NIT019" ADD CONSTRAINT "NIT019_INVOICE_ID_FK" FOREIGN KEY ("INVOICE_ID")
	  REFERENCES "NIT036" ("INVOICE_ID") ENABLE;
  ALTER TABLE "NIT019" ADD CONSTRAINT "NIT019_DOC_TYPE_ID_FK" FOREIGN KEY ("DOC_TYPE_ID")
	  REFERENCES "NIM038" ("DOC_TYPE_ID") ENABLE;
  ALTER TABLE "NIT019" ADD CONSTRAINT "NIT019_EXPENSE_CLASS_ID_FK" FOREIGN KEY ("EXPENSE_CLASS_ID")
	  REFERENCES "NIM039" ("EXPENSE_CLASS_ID") ENABLE;
  ALTER TABLE "NIT019" ADD CONSTRAINT "NIT019_COA_EXPENSE_ID_FK" FOREIGN KEY ("COA_EXPENSE_ID")
	  REFERENCES "NIM040" ("COA_EXPENSE_ID") ENABLE;
  ALTER TABLE "NIT019" ADD CONSTRAINT "NIT019_VENDOR_ID_FK" FOREIGN KEY ("VENDOR_ID")
	  REFERENCES "NIT006" ("VENDOR_ID") ENABLE;
  ALTER TABLE "NIT019" ADD CONSTRAINT "NIT019_ASG_ID_FK" FOREIGN KEY ("ASG_ID")
	  REFERENCES "NIM041" ("ASG_ID") ENABLE;

  ALTER TABLE "NIT021" ADD CONSTRAINT "NIT021_AP_ID_FK" FOREIGN KEY ("AP_ID")
	  REFERENCES "NIT019" ("AP_ID") ENABLE;

  CREATE INDEX "NIT021_I1" ON "NIT021" ("PAYMENT_METHOD_ID") 
  ;

   COMMENT ON COLUMN "NIT021"."PAYMENT_METHOD_ID" IS 'Valid values are 1 (Check) or 2 (Credit Card)';

  CREATE OR REPLACE EDITIONABLE TRIGGER "NPM009_HASHER" 
before
insert on "NPM009"
for each row
declare
    v_salt varchar2(32);
    v_new_pw varchar2(1000);
begin
    v_salt := dbms_random.string('x', 32);
    :NEW.salt := v_salt;
    :NEW.password := sys.dbms_crypto.mac(utl_raw.cast_to_raw(:NEW.password), sys.dbms_crypto.hash_sh256, utl_raw.cast_to_raw(v_salt));
end;
/
ALTER TRIGGER "NPM009_HASHER" ENABLE;
  CREATE OR REPLACE EDITIONABLE TRIGGER "NPM009_AUDIT" 
before
insert or update on "NPM009"
for each row
begin
    if inserting then
        :new.date_created := SYSDATE;
    end if;

    :new.user_update := NVL(v('APP_USER'), USER);
    :new.date_updated := SYSDATE;
end;
/
ALTER TRIGGER "NPM009_AUDIT" ENABLE;

   COMMENT ON TABLE "NPM010"  IS 'ORGANIZATION TYPE';

  ALTER TABLE "NPT001" ADD CONSTRAINT "NPT001_CUSTOMER_ID_FK" FOREIGN KEY ("CUSTOMER_ID")
	  REFERENCES "NPT009" ("CUSTOMER_ID") ENABLE;
  ALTER TABLE "NPT001" ADD CONSTRAINT "NPT001_QUOTATION_ID_FK" FOREIGN KEY ("QUOTATION_ID")
	  REFERENCES "NPT006" ("QUOTATION_ID") ENABLE;
  ALTER TABLE "NPT001" ADD CONSTRAINT "NPT001_TAX_ID_FK" FOREIGN KEY ("TAX_ID")
	  REFERENCES "NPM002" ("TAX_ID") ENABLE;
  ALTER TABLE "NPT001" ADD CONSTRAINT "NPT001_DISCOUNT_ID_FK" FOREIGN KEY ("DISCOUNT_ID")
	  REFERENCES "NPT008" ("DISCOUNT_ID") ENABLE;

  CREATE INDEX "NPT001_I2" ON "NPT001" ("CUSTOMER_ID") 
  ;

  CREATE INDEX "NPT001_I5" ON "NPT001" ("QUOTATION_ID") 
  ;

  CREATE INDEX "NPT001_I6" ON "NPT001" ("TAX_ID") 
  ;

  CREATE INDEX "NPT001_I7" ON "NPT001" ("DISCOUNT_ID") 
  ;

  ALTER TABLE "NPT002" ADD CONSTRAINT "NPT002_CASH_INV_ID_FK" FOREIGN KEY ("CASH_INVOICE_ID")
	  REFERENCES "NPT033" ("CASH_INVOICE_ID") ENABLE;
  ALTER TABLE "NPT002" ADD CONSTRAINT "NPT002_INVOICE_ID_FK" FOREIGN KEY ("INVOICE_ID")
	  REFERENCES "NPT001" ("INVOICE_ID") ENABLE;
  ALTER TABLE "NPT002" ADD CONSTRAINT "NPT002_UOM_ID_FK" FOREIGN KEY ("UOM_ID")
	  REFERENCES "NIM026" ("UOM_ID") ENABLE;
  ALTER TABLE "NPT002" ADD CONSTRAINT "NPT002_ITEM_ID_FK" FOREIGN KEY ("ITEM_ID")
	  REFERENCES "NIT001" ("ITEM_ID") ENABLE;
  ALTER TABLE "NPT002" ADD CONSTRAINT "NPT002_WAREHOUSE_ID_FK" FOREIGN KEY ("WAREHOUSE_ID")
	  REFERENCES "NIM027" ("WAREHOUSE_ID") ENABLE;

  CREATE INDEX "NPT002_I1" ON "NPT002" ("INVOICE_ID") 
  ;

  CREATE INDEX "NPT002_I2" ON "NPT002" ("ITEM_ID") 
  ;

  ALTER TABLE "NPT003" ADD CONSTRAINT "NPT003_COLLECTION_ID_FK" FOREIGN KEY ("COLLECTION_ID")
	  REFERENCES "NPT005" ("COLLECTION_ID") ENABLE;
  ALTER TABLE "NPT003" ADD CONSTRAINT "NPT003_PAYMENT_ID_FK" FOREIGN KEY ("PAYMENT_ID")
	  REFERENCES "NPT014" ("PAYMENT_ID") ENABLE;
  ALTER TABLE "NPT003" ADD CONSTRAINT "NPT003_CREDIT_MEMO_ID_FK" FOREIGN KEY ("CREDIT_MEMO_ID")
	  REFERENCES "NPT015" ("CREDIT_MEMO_ID") ENABLE;

  CREATE INDEX "NPT003_I2" ON "NPT003" ("CREDIT_MEMO_ID") 
  ;

   COMMENT ON TABLE "NPT003"  IS 'CM TRAN';

  ALTER TABLE "NPT004" ADD CONSTRAINT "NPT004_PRINT_LOCATION_ID_FK" FOREIGN KEY ("PRINT_LOCATION_ID")
	  REFERENCES "NPM004" ("PRINT_LOCATION_ID") ENABLE;
  ALTER TABLE "NPT004" ADD CONSTRAINT "NPT004_INVOICE_ID_FK" FOREIGN KEY ("INVOICE_ID")
	  REFERENCES "NPT001" ("INVOICE_ID") ENABLE;

  ALTER TABLE "NPT005" ADD CONSTRAINT "NPT005_COLLECTION_TYPE_ID_FK" FOREIGN KEY ("COLLECTION_TYPE_ID")
	  REFERENCES "NPM015" ("COLLECTION_TYPE_ID") ENABLE;
  ALTER TABLE "NPT005" ADD CONSTRAINT "NPT005_CREDIT_MEMO_ID_FK" FOREIGN KEY ("CREDIT_MEMO_ID")
	  REFERENCES "NPT015" ("CREDIT_MEMO_ID") ENABLE;
  ALTER TABLE "NPT005" ADD CONSTRAINT "NPT005_PAYMENT_ID_FK" FOREIGN KEY ("PAYMENT_ID")
	  REFERENCES "NPT014" ("PAYMENT_ID") ENABLE;

  CREATE INDEX "NPT005_I2" ON "NPT005" ("CREDIT_MEMO_ID") 
  ;

  CREATE INDEX "NPT005_I3" ON "NPT005" ("PAYMENT_ID") 
  ;

  ALTER TABLE "NPT006" ADD CONSTRAINT "NPT006_CUSTOMER_ID_FK" FOREIGN KEY ("CUSTOMER_ID")
	  REFERENCES "NPT009" ("CUSTOMER_ID") ENABLE;
  ALTER TABLE "NPT006" ADD CONSTRAINT "NPT006_TAX_ID_FK" FOREIGN KEY ("TAX_ID")
	  REFERENCES "NPM002" ("TAX_ID") ENABLE;
  ALTER TABLE "NPT006" ADD CONSTRAINT "NPT006_DISCOUNT_ID_FK" FOREIGN KEY ("DISCOUNT_ID")
	  REFERENCES "NPT008" ("DISCOUNT_ID") ENABLE;

  CREATE INDEX "NPT006_I1" ON "NPT006" ("CUSTOMER_ID") 
  ;

  CREATE INDEX "NPT006_I2" ON "NPT006" ("TAX_ID") 
  ;

  CREATE INDEX "NPT006_I3" ON "NPT006" ("DISCOUNT_ID") 
  ;

  ALTER TABLE "NPT007" ADD CONSTRAINT "NPT007_QUOTATION_ID_FK" FOREIGN KEY ("QUOTATION_ID")
	  REFERENCES "NPT006" ("QUOTATION_ID") ENABLE;
  ALTER TABLE "NPT007" ADD CONSTRAINT "NPT007_ITEM_ID_FK" FOREIGN KEY ("ITEM_ID")
	  REFERENCES "NIT001" ("ITEM_ID") ENABLE;

  ALTER TABLE "NPT009" ADD CONSTRAINT "NPT009_ACCOUNT_TYPE_ID_FK" FOREIGN KEY ("ACCOUNT_TYPE_ID")
	  REFERENCES "NPM003" ("ACCOUNT_TYPE_ID") ENABLE;
  ALTER TABLE "NPT009" ADD CONSTRAINT "NPT009_ORG_TYPE_FK" FOREIGN KEY ("ORGANIZATION_TYPE_ID")
	  REFERENCES "NPM010" ("ORGANIZATION_TYPE_ID") ENABLE;
  ALTER TABLE "NPT009" ADD CONSTRAINT "NPT009_PAYMENT_TERMS_ID_FK" FOREIGN KEY ("PAYMENT_TERMS_ID")
	  REFERENCES "NPM006" ("PAYMENT_TERMS_ID") ENABLE;

  ALTER TABLE "NPT010" ADD CONSTRAINT "NPT010_COMPOMENT_ID_FK" FOREIGN KEY ("COMPONENT_ID")
	  REFERENCES "NPM012" ("COMPONENT_ID") ENABLE;
  ALTER TABLE "NPT010" ADD CONSTRAINT "NPT010_USER_ID_FK" FOREIGN KEY ("USER_ID")
	  REFERENCES "NPM009" ("USER_ID") ENABLE;

   COMMENT ON TABLE "NPT010"  IS 'ACCESS CONTROL';

  ALTER TABLE "NPT011" ADD CONSTRAINT "NPT011_CUSTOMER_ID_FK" FOREIGN KEY ("CUSTOMER_ID")
	  REFERENCES "NPT009" ("CUSTOMER_ID") ENABLE;
  ALTER TABLE "NPT011" ADD CONSTRAINT "NPT011_DISCOUNT_ID_FK" FOREIGN KEY ("DISCOUNT_ID")
	  REFERENCES "NPT008" ("DISCOUNT_ID") ENABLE;

  ALTER TABLE "NPT013" ADD CONSTRAINT "NPT013_INVOICE_ID_FK" FOREIGN KEY ("INVOICE_ID")
	  REFERENCES "NPT001" ("INVOICE_ID") ENABLE;

  CREATE INDEX "NPT013_I1" ON "NPT013" ("INVOICE_ID") 
  ;

  ALTER TABLE "NPT014" ADD CONSTRAINT "NPT014_PAYMENT_METHOD_ID_FK" FOREIGN KEY ("PAYMENT_METHOD_ID")
	  REFERENCES "NPM005" ("PAYMENT_METHOD_ID") ENABLE;
  ALTER TABLE "NPT014" ADD CONSTRAINT "NPT014_CASH_INV_ID_FK" FOREIGN KEY ("CASH_INVOICE_ID")
	  REFERENCES "NPT033" ("CASH_INVOICE_ID") ENABLE;

  CREATE INDEX "NPT014_I1" ON "NPT014" ("PAYMENT_METHOD_ID") 
  ;

  ALTER TABLE "NPT015" ADD CONSTRAINT "NPT015_PAYMENT_METHOD_ID_FK" FOREIGN KEY ("PAYMENT_METHOD_ID")
	  REFERENCES "NPM005" ("PAYMENT_METHOD_ID") ENABLE;
  ALTER TABLE "NPT015" ADD CONSTRAINT "NPT015_CUSTOMER_ID_FK" FOREIGN KEY ("CUSTOMER_ID")
	  REFERENCES "NPT009" ("CUSTOMER_ID") ENABLE;
  ALTER TABLE "NPT015" ADD CONSTRAINT "NPT015_CM_STATUS_ID_FK" FOREIGN KEY ("CM_STATUS_ID")
	  REFERENCES "NPM017" ("CM_STATUS_ID") ENABLE;

   COMMENT ON TABLE "NPT015"  IS 'CREDIT MEMO';

  ALTER TABLE "NPT018" ADD CONSTRAINT "NPT018_RESERVE_STATUS_ID_FK" FOREIGN KEY ("RESERVE_STATUS_ID")
	  REFERENCES "NPM016" ("RESERVE_STATUS_ID") ENABLE;
  ALTER TABLE "NPT018" ADD CONSTRAINT "NPT018_CUSTOMER_ID_FK" FOREIGN KEY ("CUSTOMER_ID")
	  REFERENCES "NPT009" ("CUSTOMER_ID") ENABLE;

  ALTER TABLE "NPT019" ADD CONSTRAINT "NPT019_RESERVE_ID_FK" FOREIGN KEY ("RESERVE_ID")
	  REFERENCES "NPT018" ("RESERVE_ID") ENABLE;
  ALTER TABLE "NPT019" ADD CONSTRAINT "NPT019_UOM_ID_FK" FOREIGN KEY ("UOM_ID")
	  REFERENCES "NIM026" ("UOM_ID") ENABLE;
  ALTER TABLE "NPT019" ADD CONSTRAINT "NPT019_ITEM_ID_FK" FOREIGN KEY ("ITEM_ID")
	  REFERENCES "NIT001" ("ITEM_ID") ENABLE;
  ALTER TABLE "NPT019" ADD CONSTRAINT "NPT019_WAREHOUSE_ID_FK" FOREIGN KEY ("WAREHOUSE_ID")
	  REFERENCES "NIM027" ("WAREHOUSE_ID") ENABLE;

  CREATE INDEX "NPT019_I1" ON "NPT019" ("ITEM_ID") 
  ;

  CREATE INDEX "NPT019_I2" ON "NPT019" ("RESERVE_ID") 
  ;

  ALTER TABLE "NPT020" ADD CONSTRAINT "NPT020_GC_TYPE_ID_FK" FOREIGN KEY ("GC_TYPE_ID")
	  REFERENCES "NPM013" ("GC_TYPE_ID") ENABLE;
  ALTER TABLE "NPT020" ADD CONSTRAINT "NPT020_GC_STATUS_ID_FK" FOREIGN KEY ("GC_STATUS_ID")
	  REFERENCES "NPM014" ("GC_STATUS_ID") ENABLE;

  ALTER TABLE "NPT021" ADD CONSTRAINT "NPT021_PAYMENT_METHOD_ID_FK" FOREIGN KEY ("PAYMENT_METHOD_ID")
	  REFERENCES "NPM005" ("PAYMENT_METHOD_ID") ENABLE;
  ALTER TABLE "NPT021" ADD CONSTRAINT "NPT021_GIFT_CERTIFICATE_ID_FK" FOREIGN KEY ("GIFT_CERTIFICATE_ID")
	  REFERENCES "NPT020" ("GIFT_CERTIFICATE_ID") ENABLE;
  ALTER TABLE "NPT021" ADD CONSTRAINT "NPT021_PAYMENT_ID_FK" FOREIGN KEY ("PAYMENT_ID")
	  REFERENCES "NPT014" ("PAYMENT_ID") ENABLE;

  CREATE INDEX "NPT021_I1" ON "NPT021" ("GIFT_CERTIFICATE_ID") 
  ;

   COMMENT ON TABLE "NPT021"  IS 'GIFT CERTIFICATE';

  ALTER TABLE "NPT022" ADD CONSTRAINT "NPT022_PAYMENT_METHOD_ID_FK" FOREIGN KEY ("PAYMENT_METHOD_ID")
	  REFERENCES "NPM005" ("PAYMENT_METHOD_ID") ENABLE;
  ALTER TABLE "NPT022" ADD CONSTRAINT "NPT022_CUSTOMER_ID_FK" FOREIGN KEY ("CUSTOMER_ID")
	  REFERENCES "NPT009" ("CUSTOMER_ID") ENABLE;
  ALTER TABLE "NPT022" ADD CONSTRAINT "NPT022_BANK_ID_FK" FOREIGN KEY ("BANK_ID")
	  REFERENCES "NPM007" ("BANK_ID") ENABLE;

  CREATE INDEX "NPT022_I1" ON "NPT022" ("CUSTOMER_ID") 
  ;

  CREATE INDEX "NPT022_I2" ON "NPT022" ("BANK_ID") 
  ;

  ALTER TABLE "NPT023" ADD CONSTRAINT "NPT023_CASH_COUNT_ID_FK" FOREIGN KEY ("CASH_COUNT_ID")
	  REFERENCES "NPT024" ("CASH_COUNT_ID") ENABLE;

  CREATE INDEX "NPT023_I1" ON "NPT023" ("CASH_COUNT_ID") 
  ;

  ALTER TABLE "NPT024" ADD CONSTRAINT "NPT024_DENOMINATION_ID_FK" FOREIGN KEY ("DENOMINATION_ID")
	  REFERENCES "NPM008" ("DENOMINATION_ID") ENABLE;

  CREATE INDEX "NPT024_I1" ON "NPT024" ("DENOMINATION_ID") 
  ;

  CREATE OR REPLACE EDITIONABLE TRIGGER "NPT024_CASH_COUNT_SEQ" 
BEFORE INSERT ON NPT024
FOR EACH ROW
BEGIN
    IF :NEW.cash_count_id IS NULL THEN
        :NEW.cash_count_id := cash_count_id_seq.NEXTVAL;
    END IF;
      
END;
/
ALTER TRIGGER "NPT024_CASH_COUNT_SEQ" ENABLE;

  ALTER TABLE "NPT028" ADD CONSTRAINT "NPT028_SIC_ID_FK" FOREIGN KEY ("SIC_ID")
	  REFERENCES "NIM023" ("SIC_ID") ENABLE;
  ALTER TABLE "NPT028" ADD CONSTRAINT "NPT028_DISCOUNT_ID_FK" FOREIGN KEY ("DISCOUNT_ID")
	  REFERENCES "NPT008" ("DISCOUNT_ID") ENABLE;

  ALTER TABLE "NPT029" ADD CONSTRAINT "NPT029_DISCOUNT_ID_FK" FOREIGN KEY ("DISCOUNT_ID")
	  REFERENCES "NPT008" ("DISCOUNT_ID") ENABLE;
  ALTER TABLE "NPT029" ADD CONSTRAINT "NPT029_DEPT_ID_FK" FOREIGN KEY ("DEPT_ID")
	  REFERENCES "NIM024" ("DEPT_ID") ENABLE;

  ALTER TABLE "NPT030" ADD CONSTRAINT "NPT030_CLASS_ID_FK" FOREIGN KEY ("CLASS_ID")
	  REFERENCES "NIM025" ("CLASS_ID") ENABLE;
  ALTER TABLE "NPT030" ADD CONSTRAINT "NPT030_DISCOUNT_ID_FK" FOREIGN KEY ("DISCOUNT_ID")
	  REFERENCES "NPT008" ("DISCOUNT_ID") ENABLE;

   COMMENT ON TABLE "NIM038"  IS 'Document Type';

   COMMENT ON TABLE "NIM039"  IS 'Expense Class';

  CREATE OR REPLACE EDITIONABLE TRIGGER "NIM039_AUDIT" 
before
insert or update on "NIM039"
for each row
begin
    if inserting then
        :new.create_user := NVL(v('APP_USER'), USER);
        :new.create_date := SYSDATE;
    end if;

    :new.update_user := NVL(v('APP_USER'), USER);
    :new.update_date := SYSDATE;
end;
/
ALTER TRIGGER "NIM039_AUDIT" ENABLE;

   COMMENT ON TABLE "NIM040"  IS 'COA Expense Code';

   COMMENT ON TABLE "NPM013"  IS 'GC Type';

   COMMENT ON TABLE "NPM014"  IS 'GC Status';

   COMMENT ON TABLE "NPM003"  IS 'ACCOUNT TYPE';

  ALTER TABLE "NPM012" ADD CONSTRAINT "NPM012_MODULE_ID_FK" FOREIGN KEY ("MODULE_ID")
	  REFERENCES "NPM011" ("MODULE_ID") ENABLE;

   COMMENT ON TABLE "NPM012"  IS 'COMPONENT';

   COMMENT ON TABLE "NIM041"  IS 'Audit Schedule Group';

   COMMENT ON TABLE "NPM016"  IS 'Reserve Status';

  ALTER TABLE "NPT031" ADD CONSTRAINT "NPT031_DELIVERY_ID_FK" FOREIGN KEY ("DELIVERY_ID")
	  REFERENCES "NPT012" ("DELIVERY_ID") ENABLE;
  ALTER TABLE "NPT031" ADD CONSTRAINT "NPT031_INVOICE_ID_FK" FOREIGN KEY ("INVOICE_ID")
	  REFERENCES "NPT001" ("INVOICE_ID") ENABLE;

  ALTER TABLE "NPT036" ADD CONSTRAINT "NPT036_RESERVE_ID_PK" FOREIGN KEY ("RESERVE_ID")
	  REFERENCES "NPT018" ("RESERVE_ID") ENABLE;
  ALTER TABLE "NPT036" ADD CONSTRAINT "NPT036_RESERVE_ITEM_ID_FK" FOREIGN KEY ("RESERVE_ITEM_ID")
	  REFERENCES "NPT019" ("RESERVE_ITEM_ID") ENABLE;

   COMMENT ON TABLE "NPT036"  IS 'Reserve Update History';

  ALTER TABLE "NPT037" ADD CONSTRAINT "NPT037_ITEM_INVOICE_ID_FK" FOREIGN KEY ("ITEM_INVOICE_ID")
	  REFERENCES "NPT002" ("ITEM_INVOICE_ID") ENABLE;
  ALTER TABLE "NPT037" ADD CONSTRAINT "NPT037_RETURN_ID_FK" FOREIGN KEY ("RETURN_ID")
	  REFERENCES "NPT015" ("RETURN_ID") ENABLE;

  ALTER TABLE "NPT038" ADD CONSTRAINT "NPT038_COLLECTION_ID_FK" FOREIGN KEY ("COLLECTION_ID")
	  REFERENCES "NPT005" ("COLLECTION_ID") ENABLE;
  ALTER TABLE "NPT038" ADD CONSTRAINT "NPT038_INVOICE_ID_FK" FOREIGN KEY ("INVOICE_ID")
	  REFERENCES "NPT001" ("INVOICE_ID") ENABLE;

   COMMENT ON TABLE "NPT038"  IS 'Collection to Invoice';

  ALTER TABLE "NIT023" ADD CONSTRAINT "NIT023_ITEM_ID_FK" FOREIGN KEY ("ITEM_ID")
	  REFERENCES "NIT001" ("ITEM_ID") ENABLE;

   COMMENT ON TABLE "NIT023"  IS 'ITEM TRANSACTION MAP';

  CREATE INDEX "NIT026_SHIPMENT_ID_IDX" ON "NIT026" ("SHIPMENT_ID") 
  ;

   COMMENT ON TABLE "NIT026"  IS 'SERIAL NUMBER';

  CREATE OR REPLACE EDITIONABLE TRIGGER "NIT026_AUDIT" 
before
insert or update on "NIT026"
for each row
begin
    if inserting then
        :new.create_date := SYSDATE;
        :new.create_user := NVL(v('APP_USER'), USER);
    end if;

    :new.update_user := NVL(v('APP_USER'), USER);
    :new.update_date := SYSDATE;
end;
/
ALTER TRIGGER "NIT026_AUDIT" ENABLE;

  ALTER TABLE "NIT020" ADD CONSTRAINT "NIT020_WAREHOUSE_ID_FK" FOREIGN KEY ("WAREHOUSE_ID")
	  REFERENCES "NIM027" ("WAREHOUSE_ID") ENABLE;
  ALTER TABLE "NIT020" ADD CONSTRAINT "NIT020_FROM_ITEM_ID_FK" FOREIGN KEY ("FROM_ITEM_ID")
	  REFERENCES "NIT001" ("ITEM_ID") ENABLE;
  ALTER TABLE "NIT020" ADD CONSTRAINT "NIT020_FROM_UOM_ID" FOREIGN KEY ("FROM_UOM_ID")
	  REFERENCES "NIM026" ("UOM_ID") ENABLE;
  ALTER TABLE "NIT020" ADD CONSTRAINT "NIT020_TO_ITEM_ID_FK" FOREIGN KEY ("TO_ITEM_ID")
	  REFERENCES "NIT001" ("ITEM_ID") ENABLE;
  ALTER TABLE "NIT020" ADD CONSTRAINT "NIT020_TO_UOM_ID_FK" FOREIGN KEY ("TO_UOM_ID")
	  REFERENCES "NIM026" ("UOM_ID") ENABLE;

   COMMENT ON TABLE "NIT020"  IS 'Convert Item';

  ALTER TABLE "NPT035" ADD CONSTRAINT "NPT035_ITEM_INVOICE_ID_FK" FOREIGN KEY ("ITEM_INVOICE_ID")
	  REFERENCES "NPT002" ("ITEM_INVOICE_ID") ENABLE;
  ALTER TABLE "NPT035" ADD CONSTRAINT "NPT035_REFUND_ID_FK" FOREIGN KEY ("REFUND_ID")
	  REFERENCES "NPT016" ("REFUND_ID") ENABLE;

  ALTER TABLE "NPT032" ADD FOREIGN KEY ("CUSTOMER_ID")
	  REFERENCES "NPT009" ("CUSTOMER_ID") ENABLE;
  ALTER TABLE "NPT032" ADD FOREIGN KEY ("DISCOUNT_ID")
	  REFERENCES "NPT008" ("DISCOUNT_ID") ENABLE;

  ALTER TABLE "NIM036" ADD CONSTRAINT "NIM036_MODULE_ID_FK" FOREIGN KEY ("MODULE_ID")
	  REFERENCES "NPM011" ("MODULE_ID") ENABLE;


create or replace package "ITEM_TRANS_PKG" as
    TYPE v_itm_rec IS RECORD(
        IO varchar2(1),
        INV_SHP_NO VARCHAR2(15),
        INV_DATE_ETA DATE,
        QTY_CS NUMBER(9,0),
        QTY_UNITS NUMBER(9,0),
        BALANCE NUMBER(9,0),
        COSTS NUMBER(9,2),
        WHSE NUMBER(1)
    );

    TYPE v_itm_table IS TABLE OF v_itm_rec;

    TYPE header_rec IS RECORD(
        RETURN_ITEM varchar2(1000)
    );

    TYPE header_table IS TABLE OF header_rec;

    FUNCTION get_table(
        p_item_id varchar2
    )
    RETURN v_itm_table PIPELINED;

    FUNCTION set_item_no(
        p_item_id varchar2
    )
    RETURN header_table PIPELINED;
    
    FUNCTION set_upc(
        p_item_id varchar2
    )
    RETURN header_table PIPELINED;
    
    FUNCTION set_item_desc(
        p_item_id varchar2
    )
    RETURN header_table PIPELINED;
    
end "ITEM_TRANS_PKG";
/












create or replace package     nos_authentication_pkg
as
	function nos_authentication (
	    p_username in varchar2,
	    p_password in varchar2 )
	return boolean;

    -- same as nos_authentication but with no locking and no apex processes
    function nos_authentication2 (
	    p_username in varchar2,
	    p_password in varchar2 )
	return boolean;
end nos_authentication_pkg;
/
create or replace package     order_sales_pkg
AS
	TYPE order_sales_rec IS RECORD (
        otas_id         nim037.otas_id%TYPE,
		otas_code		nim037.otas_code%TYPE,
		otas_name 		nim037.otas_name%TYPE
	);

	TYPE order_sales_tab IS TABLE OF order_sales_rec;

	FUNCTION get_list (
		p_sort_col		NUMBER,
		p_asc_desc 		VARCHAR2
	)
	RETURN order_sales_tab PIPELINED;
END order_sales_pkg;
/
create or replace package "OTAS_SORT_AND_SEARCH" as
TYPE v_rec IS RECORD(
    otas_id number,
    otas_code varchar2(5),
    otas_name varchar2(50)
);

TYPE v_otas_tab IS TABLE OF v_rec;

FUNCTION OTAS_TABLE(
    p_sort_by varchar2,
    p_sort_type varchar2,
    p_search_column varchar2,
    p_search_term varchar2
)
return v_otas_tab PIPELINED;

end "OTAS_SORT_AND_SEARCH";
/










































































create or replace package "SOA_BREAKDOWN_RECORDS" as
    FUNCTION get_breakdown (
        p_soa_customer_id NUMBER,
        p_soa_payment_terms_id NUMBER,
        p_soa_breakdown_number NUMBER   
        )
    RETURN NUMBER;

    FUNCTION get_breakdown_customers (
        p_soa_customer_id NUMBER,
        p_soa_breakdown_number NUMBER   
        )
    RETURN NUMBER;

    FUNCTION get_breakdown_customers_sum (
        p_soa_customer_id NUMBER,
        p_soa_payment_terms_id NUMBER
        )
    RETURN NUMBER;

    TYPE v_eom IS RECORD(
        legal_name VARCHAR(20),
        billing_contact_a VARCHAR(20),
        billing_contact_b VARCHAR(20),   
        balance_current NUMBER,
        balance_thirty NUMBER,
        balance_sixty NUMBER,
        balance_over_sixty NUMBER, 
        date_created DATE,
        invoice_id NUMBER,
        payment_terms_name VARCHAR(10),
        days NUMBER
    );

    TYPE v_eom_tab IS TABLE OF v_eom;

    FUNCTION EOM_TABLE(
        p_customer_id NUMBER
    )
    return v_eom_tab PIPELINED;
    
end "SOA_BREAKDOWN_RECORDS";
/



create or replace package "SHIPMENT_RECORDS_PKG" 
as
    FUNCTION get_first_vendor (
        p_shipment_id       nit016.shipment_id%TYPE
    )
    RETURN VARCHAR2;

    TYPE shipment_rec IS RECORD (
        shipment_id     nit016.shipment_id%TYPE,
        vendor          nit006.vendor_name%TYPE,
        vendor_code     nit006.vendor_code%TYPE,
        ship_no         VARCHAR2(3),
        shipment_number nit016.shipment_number%TYPE,
        p               nit016.is_posted%TYPE,
        vessel_name     nit016.vessel_name%TYPE,
        vessel_bl_no    nit016.vessel_bl_no%TYPE,
        etd             date,
        eta             date,
        container_no    nit016.container_no%TYPE,
        month_s         VARCHAR2(20)
    );

    TYPE shipment_tab IS TABLE OF shipment_rec;
    
    FUNCTION get_shipment_records (
        p_search        VARCHAR2,
        p_sort_col      VARCHAR2,
        p_month         VARCHAR2
    )
    RETURN shipment_tab PIPELINED;

    TYPE vendor_shipment_rec IS RECORD (
        svp_id          nit015.svp_id%TYPE,
        vendor_id       nit015.vendor_id%TYPE,
        vendor_name     nit006.vendor_name%TYPE,
        vendor_sequence nit015.vendor_sequence%TYPE,
        po_id           nit015.po_id%TYPE,
        invoices        VARCHAR2(4000)
    );

    TYPE vendor_shipment_tab IS TABLE OF vendor_shipment_rec;

    FUNCTION get_shipment_vendor_basic_info (
        p_shipment_id   nit016.shipment_id%TYPE
    )
    RETURN vendor_shipment_tab PIPELINED;

    FUNCTION get_next_shipment_item_id (
        p_shipment_id   nit016.shipment_id%TYPE
    )
    RETURN number;

    FUNCTION save_shipment (
        p_clob_data         clob
    )
    RETURN nit016.shipment_id%TYPE;

    FUNCTION save_basic_info (
        p_shipment_id       nit016.shipment_id%TYPE,
        p_shipment_no       nit016.shipment_number%TYPE,
        p_vessel_name       nit016.vessel_name%TYPE,
        p_vessel_bl_no      nit016.vessel_bl_no%TYPE,
        p_barge             nit016.barge%TYPE,
        p_barge_bl_no       nit016.barge_bl_no%TYPE,
        p_container_type    nit016.container_type%TYPE,
        p_container_no      nit016.container_no%TYPE,
        p_origin            nit016.origin%TYPE,
        p_eta               varchar2,
        p_etd               varchar2,
        p_ata               varchar2,
        p_freight_cost      nit017.freight_cost%TYPE,
        p_insurance_cost    nit017.insurance_cost%TYPE,
        p_handling_cost     nit017.handling_cost%TYPE,
        p_duties_and_taxes  nit017.duties_and_taxes%TYPE,
        p_misc_expenses     nit017.misc_expenses%TYPE,
        p_vendor_credits    nit017.vendor_credits%TYPE
    )
    RETURN nit016.shipment_id%TYPE;

    PROCEDURE save_vendor_po (
        p_shipment_id       nit016.shipment_id%TYPE,
        p_clob_data         clob
    );

    PROCEDURE save_vendor_po2 (
        p_shipment_id       nit016.shipment_id%TYPE,
        p_clob_data         clob
    );

    PROCEDURE save_serial_numbers (
        p_shipment_id           nit026.shipment_id%TYPE,
        p_shipment_items_id     nit026.shipment_items_id%TYPE,
        p_collection_name       varchar2
    );

    FUNCTION receive_shipment (
        p_shipment_id       nit016.shipment_id%TYPE,
        p_warehouse_id      nit016.warehouse_id%TYPE
    )
    RETURN varchar2;

    FUNCTION get_shipment_total_value (
        p_shipment_id       nit016.shipment_id%TYPE
    )
    RETURN NUMBER;

    FUNCTION get_shipment_incidental_cost(
        p_shipment_id       nit016.shipment_id%TYPE
    )
    RETURN NUMBER;

    FUNCTION post_shipment (
        p_shipment_id       nit016.shipment_id%TYPE
    )
    RETURN VARCHAR2;

    FUNCTION post_all_po (
        p_shipment_id       nit016.shipment_id%TYPE
    )
    RETURN varchar2;
    
    TYPE rep_ship_item_rec IS RECORD (
        shipment_id         nit018.shipment_id%TYPE,
        shipment_items_id   nit018.shipment_items_id%TYPE,
        item_desc           nit001.item_desc%TYPE,
        cases               nit018.qty%TYPE,
        cs_units            nit004.qty%TYPE,
        cs_uom              nim026.uom_code%TYPE,
        total_units         NUMBER,
        fob_spn             NUMBER,
        incidental_cost     NUMBER,
        unit_cost           NUMBER,
        total_cost          NUMBER
    );

    TYPE rep_ship_item_tab IS TABLE OF rep_ship_item_rec;

    FUNCTION get_shipment_report_items (
        p_shipment_id       nit016.shipment_id%TYPE
    )
    RETURN rep_ship_item_tab PIPELINED;

    TYPE rep_ship_vendor_inv_rec IS RECORD (
        vendor_no           NUMBER,
        vendor_name         nit006.vendor_name%TYPE,
        ref_po              nit012.po_id%TYPE,
        invoices            VARCHAR2(55)
    );

    TYPE rep_ship_vendor_inv_tab IS TABLE OF rep_ship_vendor_inv_rec;

    FUNCTION get_shipment_vendor_invoices (
        p_shipment_id       nit016.shipment_id%TYPE
    )
    RETURN rep_ship_vendor_inv_tab PIPELINED;

    FUNCTION get_rep_duplicate_container_no (
        p_mth               VARCHAR2,
        p_yr                VARCHAR2,
        p_sort              VARCHAR2
    )
    RETURN shipment_tab PIPELINED;

    TYPE inv_costing_sheet_main_rec IS RECORD (
        shipment_id         nit016.shipment_id%TYPE,
        shipment_number     nit016.shipment_number%TYPE,
        vendor_name         nit006.vendor_name%TYPE,
        document_number     nit036.document_number%TYPE,
        ata                 nit016.ata%TYPE,
        vessel_name         nit016.vessel_name%TYPE,
        vessel_bl_no        nit016.vessel_bl_no%TYPE,
        barge               nit016.barge%TYPE,
        barge_bl_no         nit016.barge_bl_no%TYPE,
        container_no        nit016.container_no%TYPE,
        freight_cost        nit017.freight_cost%TYPE,
        insurance_cost      nit017.insurance_cost%TYPE,
        handling_cost       nit017.handling_cost%TYPE,
        duties_and_taxes    nit017.duties_and_taxes%TYPE,
        misc_expenses       nit017.misc_expenses%TYPE,
        vendor_credits      nit017.vendor_credits%TYPE,
        title_h             VARCHAR2(20)
    );

    TYPE inv_costing_sheet_main_tab IS TABLE OF inv_costing_sheet_main_rec;

    FUNCTION get_inv_costing_sheet_main (
        p_shipment_id       VARCHAR2,
        p_month             VARCHAR2
    )
    RETURN inv_costing_sheet_main_tab PIPELINED;
    
end "SHIPMENT_RECORDS_PKG";
/
















create or replace PACKAGE STRING_FNC
IS
    TYPE split_tble IS TABLE OF VARCHAR2(32767);
    
    FUNCTION split_string (p_list VARCHAR2, p_delimiter VARCHAR2)
    RETURN split_tble;

    FUNCTION split_string_pipelined (p_list VARCHAR2, p_delimiter VARCHAR2)
    RETURN split_tble PIPELINED;
END;
/









create or replace FUNCTION     has_access (
	p_user_name 		npm009.user_name%TYPE,
	p_module_id 		npm011.module_id%TYPE,
	p_component_id 		npm012.component_id%TYPE
)
RETURN VARCHAR2
AS
	v_with_access VARCHAR2(1) := 'N';
BEGIN
	SELECT CASE WHEN EXISTS (SELECT NULL
							   FROM npm009 a,
							        npt010 b,
							        npm012 c,
							        npm011 d
							  WHERE a.user_id = b.user_id
							    AND b.component_id = c.component_id
							    AND c.module_id = d.module_id
							    AND a.user_name = p_user_name
							    AND d.module_id = p_module_id
							    AND c.component_id = p_component_id)
				THEN 'Y'
				ELSE 'N'
				END
	  INTO v_with_access
	  FROM dual;

	RETURN v_with_access;
END has_access;
/
create or replace FUNCTION DATE_VALID(v_date IN VARCHAR2) RETURN NUMBER IS
    v_date1 DATE;
BEGIN
    SELECT TO_DATE(v_date) INTO v_date1 FROM DUAL;
        RETURN 1;
    EXCEPTION WHEN Others THEN
        RETURN 0;
END;
/

























































































create or replace function "PW_GEN" (
    v_salt          varchar2,
    v_pw            varchar2
)
return varchar2
as
begin
    return sys.dbms_crypto.mac(utl_raw.cast_to_raw(v_pw), sys.dbms_crypto.hash_sh256, utl_raw.cast_to_raw(v_salt));
end "PW_GEN";
/







































































































create or replace trigger "NIT016_AUDIT"
before
insert or update on "NIT016"
for each row
begin
    if inserting then
        :new.create_date := SYSDATE;
        :new.create_user := NVL(v('APP_USER'), USER);
    end if;

    :new.update_user := NVL(v('APP_USER'), USER);
    :new.update_date := SYSDATE;
end;
/



create or replace trigger "NPM009_AUDIT"
before
insert or update on "NPM009"
for each row
begin
    if inserting then
        :new.date_created := SYSDATE;
    end if;

    :new.user_update := NVL(v('APP_USER'), USER);
    :new.date_updated := SYSDATE;
end;
/
create or replace trigger NPM009_HASHER
before
insert on "NPM009"
for each row
declare
    v_salt varchar2(32);
    v_new_pw varchar2(1000);
begin
    v_salt := dbms_random.string('x', 32);
    :NEW.salt := v_salt;
    :NEW.password := sys.dbms_crypto.mac(utl_raw.cast_to_raw(:NEW.password), sys.dbms_crypto.hash_sh256, utl_raw.cast_to_raw(v_salt));
end;
/



create or replace trigger "NIT017_AUDIT"
before
insert or update on "NIT017"
for each row
begin
    if inserting then
        :new.create_date := SYSDATE;
        :new.create_user := NVL(v('APP_USER'), USER);
    end if;

    :new.update_user := NVL(v('APP_USER'), USER);
    :new.update_date := SYSDATE;
end;
/
create or replace trigger "NIT018_AUDIT"
before
insert or update on "NIT018"
for each row
begin
    if inserting then
        :new.create_date := SYSDATE;
        :new.create_user := NVL(v('APP_USER'), USER);
    end if;

    :new.update_user := NVL(v('APP_USER'), USER);
    :new.update_date := SYSDATE;
end;
/
create or replace trigger "NIT026_AUDIT"
before
insert or update on "NIT026"
for each row
begin
    if inserting then
        :new.create_date := SYSDATE;
        :new.create_user := NVL(v('APP_USER'), USER);
    end if;

    :new.update_user := NVL(v('APP_USER'), USER);
    :new.update_date := SYSDATE;
end;
/





create or replace trigger "NIT015_AUDIT"
before
insert or update on "NIT015"
for each row
begin
    if inserting then
        :new.create_date := SYSDATE;
        :new.create_user := NVL(v('APP_USER'), USER);
    end if;

    :new.update_user := NVL(v('APP_USER'), USER);
    :new.update_date := SYSDATE;
end;
/



create or replace trigger "NIT035_AUDIT"
before
insert or update on "NIT035"
for each row
begin
    if inserting then
        :new.create_date := SYSDATE;
        :new.create_user := NVL(v('APP_USER'), USER);
        -- :new.create_user := 'TEST';
    end if;

    :new.update_user := NVL(v('APP_USER'), USER);
    -- :new.update_user := 'TEST';
    :new.update_date := SYSDATE;
end;
/
create or replace trigger "NIT036_AUDIT"
before
insert or update on "NIT036"
for each row
begin
    if inserting then
        :new.create_date := SYSDATE;
        -- :new.create_user := NVL(v('APP_USER'), USER);
        :new.create_user := 'TEST';
    end if;

    -- :new.update_user := NVL(v('APP_USER'), USER);
    :new.update_user := 'TEST';
    :new.update_date := SYSDATE;
end;
/

create or replace trigger "NPT024_CASH_COUNT_SEQ"
BEFORE INSERT ON NPT024
FOR EACH ROW
BEGIN
    IF :NEW.cash_count_id IS NULL THEN
        :NEW.cash_count_id := cash_count_id_seq.NEXTVAL;
    END IF;
      
END;
/












create or replace trigger "NIM039_AUDIT"
before
insert or update on "NIM039"
for each row
begin
    if inserting then
        :new.create_user := NVL(v('APP_USER'), USER);
        :new.create_date := SYSDATE;
    end if;

    :new.update_user := NVL(v('APP_USER'), USER);
    :new.update_date := SYSDATE;
end;
/


   CREATE SEQUENCE  "CASH_COUNT_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;


create or replace package body "ITEM_TRANS_PKG" as
    FUNCTION get_table(
        p_item_id varchar2
    )
    RETURN v_itm_table PIPELINED
    AS
        v_rec v_itm_rec;
        TYPE q_cur IS REF CURSOR;
        v_cur q_cur;
        v_query varchar2(5000);
    BEGIN
    IF p_item_id IS NOT NULL THEN
    BEGIN
    v_query := 'SELECT 
                ''O'' AS "IO", ''IV '' || npt002.invoice_id AS "INV_SHP_NO",
                npt002.date_created AS "INV_DATE_ETA", npt002.quantity AS "QTY_CS",
                npt002.quantity * 100 AS "QTY_UNITS", npt001.sub_total/(npt002.quantity * 100) AS "COSTS", 
                nit022.balance_after_transaction AS "BALANCE", npt002.warehouse_id AS "WHSE" 
            FROM 
                NPT002 npt002, NPT001 npt001, NIT022 nit022
            WHERE npt002.ITEM_ID IN (' || p_item_id || ') AND npt001.invoice_id = npt002.invoice_id AND nit022.transaction_type = 1
                    AND nit022.reference_id = npt002.invoice_id
            UNION ALL
            SELECT 
                ''I'' AS "IO", ''S '' || nit016.shipment_id AS "INV_SHP_NO", 
                nit016.eta AS "INV_DATE_ETA", QTY_UNITS/100
                AS "QTY_CS", QTY_UNITS, nit013.vendor_price AS "COSTS",' ||--nit013.sub_total/QTY_UNITS AS "COSTS", 
                'nit022.balance_after_transaction AS "BALANCE", nit016.warehouse_id AS "WHSE" 
            FROM 
                NIT016 nit016, NIT015 nit015, NIT013 nit013, NIT022 nit022, 
                (SELECT SUM(CASE internal_uom_id
                    WHEN 1 THEN QTY
                    WHEN 2 THEN QTY * 10
                    WHEN 3 THEN QTY * 50
                    WHEN 4 THEN QTY * 100
                    END) AS QTY_UNITS FROM nit013 where item_id IN (' || p_item_id || '))
             WHERE nit016.shipment_id = nit015.shipment_id AND nit015.po_id = nit013.po_id 
                AND nit013.item_id IN (' || p_item_id || ') AND nit022.transaction_type = 2 AND nit022.reference_id = nit016.shipment_id
             ORDER BY INV_DATE_ETA DESC';
    
    OPEN v_cur FOR v_query;

    LOOP
        FETCH v_cur INTO v_rec.io, v_rec.inv_shp_no, v_rec.inv_date_eta, v_rec.qty_cs, v_rec.qty_units,
        v_rec.costs, v_rec.balance, v_rec.whse;
        EXIT WHEN v_cur%NOTFOUND;
        PIPE ROW (v_rec);
    END LOOP;
    CLOSE v_cur;
    END;
    END IF;
    END get_table;

    FUNCTION set_item_no(
        p_item_id varchar2
    )
    RETURN header_table PIPELINED AS
    v_query varchar2(1000);
    TYPE q_cur IS REF CURSOR;
    v_cur q_cur;
    v_rec header_rec;
    BEGIN
    IF p_item_id IS NOT NULL THEN
        BEGIN
            v_query:='SELECT DISTINCT ITEM_NUM FROM NIT001 WHERE ITEM_ID IN (' || p_item_id || ')';

            OPEN v_cur FOR v_query;

            LOOP
                FETCH v_cur INTO v_rec.return_item;
                EXIT WHEN v_cur%NOTFOUND;
                PIPE ROW(v_rec);
            END LOOP;
            CLOSE v_cur;
        END;
    END IF;
    END set_item_no;

    FUNCTION set_upc(
        p_item_id varchar2
    )
    RETURN header_table PIPELINED AS
    v_query varchar2(1000);
    TYPE q_cur IS REF CURSOR;
    v_cur q_cur;
    v_rec header_rec;
    BEGIN
    IF p_item_id IS NOT NULL THEN
        BEGIN
            v_query:='SELECT DISTINCT UPC FROM NIT002 WHERE ITEM_ID IN (' || p_item_id || ') AND UOM_ID = 4';

            OPEN v_cur FOR v_query;

            LOOP
                FETCH v_cur INTO v_rec.return_item;
                EXIT WHEN v_cur%NOTFOUND;
                PIPE ROW(v_rec);
            END LOOP;
            CLOSE v_cur;
        END;
    END IF;
    END set_upc;

    FUNCTION set_item_desc(
        p_item_id varchar2
    )
    RETURN header_table PIPELINED AS
    v_query varchar2(1000);
    TYPE q_cur IS REF CURSOR;
    v_cur q_cur;
    v_rec header_rec;
    BEGIN
    IF p_item_id IS NOT NULL THEN
        BEGIN
            v_query:='SELECT DISTINCT ITEM_DESC FROM NIT001 WHERE ITEM_ID IN (' || p_item_id || ')';

            OPEN v_cur FOR v_query;

            LOOP
                FETCH v_cur INTO v_rec.return_item;
                EXIT WHEN v_cur%NOTFOUND;
                PIPE ROW(v_rec);
            END LOOP;
            CLOSE v_cur;
        END;
    END IF;
    END set_item_desc;

end "ITEM_TRANS_PKG";
/












create or replace package body     nos_authentication_pkg
as
	function nos_authentication (
	    p_username in varchar2,
	    p_password in varchar2 )
	    return boolean
	is
	    v_user          npm009.user_name%type := upper(p_username);
	    v_pw            npm009.password%type;
        v_salt          npm009.salt%type;
        v_status        npm009.status%type;
        v_last_lock     npm009.last_locked_date%type;
        v_hashed_pw     npm009.password%type;
        inv_login_ctr   npm009.invalid_login_tries%type;

        v_result    boolean := false;
	begin
	    begin
	        select password, salt, status, last_locked_date
	          into v_pw, v_salt, v_status, v_last_lock
	          from npm009
	         where user_name = v_user;

            v_hashed_pw := sys.dbms_crypto.mac(utl_raw.cast_to_raw(p_password), sys.dbms_crypto.hash_sh256, utl_raw.cast_to_raw(v_salt));
	    exception when no_data_found then
	        v_pw := '-invalid-';
            v_hashed_pw := '-';
	    end;

        v_result := v_hashed_pw = v_pw;
        
        if v_pw != '-invalid-' then -- user exists
            if v_status = 'L' and (v_last_lock + 1/24) >= sysdate then 
                apex_util.set_custom_auth_status (p_status => 'Your account has been locked due to multiple unsuccessful login attempts. Please contact your administrator.');
                return (false);
            end if;

            if not v_result then
                select invalid_login_tries + 1
                  into inv_login_ctr
                  from npm009
                 where user_name = v_user;

                update npm009
                   set invalid_login_tries = inv_login_ctr,
                       status = case when inv_login_ctr = 5 then 'L' else 'A' end,
                       last_locked_date = case when inv_login_ctr = 5 then sysdate else null end
                 where user_name = v_user;

                if inv_login_ctr = 5 then 
                    apex_util.set_custom_auth_status (p_status => 'Your account has been locked due to multiple unsuccessful login attempts. Please contact your administrator.');
                end if;
            else
                update npm009
                   set invalid_login_tries = 0,
                       last_locked_date = null,
                       status = 'A'
                 where user_name = v_user;
            end if;
        end if;

	    return v_result;
	end nos_authentication;

    function nos_authentication2 (
	    p_username in varchar2,
	    p_password in varchar2 )
	    return boolean
	is
	    v_user          npm009.user_name%type := upper(p_username);
	    v_pw            npm009.password%type;
        v_salt          npm009.salt%type;        
        v_hashed_pw     npm009.password%type;
        v_result    boolean := false;
	begin
	    begin
	        select password, salt
	          into v_pw, v_salt
	          from npm009
	         where user_name = v_user;

            v_hashed_pw := sys.dbms_crypto.mac(utl_raw.cast_to_raw(p_password), sys.dbms_crypto.hash_sh256, utl_raw.cast_to_raw(v_salt));
	    exception when no_data_found then
	        v_pw := '-invalid-';
            v_hashed_pw := '-';
	    end;

        v_result := v_hashed_pw = v_pw;
        
	    return v_result;
	end nos_authentication2;
end nos_authentication_pkg;
/
create or replace package body     order_sales_pkg
AS
	FUNCTION get_list (
		p_sort_col		NUMBER,
		p_asc_desc 		VARCHAR2
	)
	RETURN order_sales_tab PIPELINED
	AS
		v_query             VARCHAR2(9000);
        TYPE q_cur IS REF CURSOR;
 
        v_cur               q_cur;
        v_rec               order_sales_rec;
	BEGIN
		v_query := 'SELECT otas_id, otas_code, otas_name
		              FROM nim037';

		IF p_sort_col = 1 THEN
			v_query := v_query || ' ORDER BY otas_code ' || p_asc_desc;
		ELSIF p_sort_col = 2 THEN
			v_query := v_query || ' ORDER BY otas_name ' || p_asc_desc;
		ELSE
			null;
		END IF;

		OPEN v_cur FOR v_query;
        
        LOOP
            FETCH v_cur INTO v_rec.otas_id, v_rec.otas_code, v_rec.otas_name;
            EXIT WHEN v_cur%NOTFOUND;
            
            PIPE ROW(v_rec);
        END LOOP;
        
        CLOSE v_cur;
	END get_list;

END order_sales_pkg;
/
create or replace package body "OTAS_SORT_AND_SEARCH" as

FUNCTION OTAS_TABLE(
    p_sort_by varchar2,
    p_sort_type varchar2,
    p_search_column varchar2,
    p_search_term varchar2
)
return v_otas_tab PIPELINED
AS
TYPE q_cur IS REF CURSOR;
v_cur q_cur;
v_otas_rec v_rec;
l_query varchar2(1000);
BEGIN
l_query := 'SELECT otas_id, otas_code, otas_name FROM NIM037';
IF p_search_column IS NOT NULL and p_search_term IS NOT NULL THEN 
    IF p_search_column = 'code' THEN
        l_query := l_query || ' WHERE OTAS_CODE LIKE ''%' || UPPER(p_search_term) || '%''';
    ELSIF p_search_column = 'name' THEN
        l_query := l_query || ' WHERE OTAS_NAME LIKE ''%' || UPPER(p_search_term) || '%''';
    END IF;
END IF;

IF p_sort_by IS NOT NULL THEN
    IF p_sort_by = 'code' THEN
        l_query := l_query || ' ORDER BY otas_code ' || NVL(p_sort_type, 'ASC');
    ELSIF p_sort_by = 'name' THEN
        l_query := l_query || ' ORDER BY OTAS_NAME ' || NVL(p_sort_type, 'ASC');
    END IF;
END IF;

OPEN v_cur FOR l_query;

LOOP
    FETCH v_cur INTO v_otas_rec.otas_id, v_otas_rec.otas_code, v_otas_rec.otas_name;
    EXIT WHEN v_cur%NOTFOUND;

    PIPE ROW(v_otas_rec);

END LOOP;

CLOSE v_cur;

END OTAS_TABLE;

end "OTAS_SORT_AND_SEARCH";
/










































































create or replace package body "SOA_BREAKDOWN_RECORDS" as
    FUNCTION EOM_TABLE(
        p_customer_id NUMBER
    )
    return v_eom_tab PIPELINED
    AS
        TYPE q_cur IS REF CURSOR;
        v_eom_rec v_eom;
        v_cur q_cur;       
        l_query_current varchar2(1000);

        l_query_thirty varchar2(1000);

        l_query_sixty varchar2(1500);

        l_query_over_sixty varchar2(1000);

    BEGIN
    l_query_current := 'SELECT
                    	    npt9.LEGAL_NAME AS "Subsidiary",
                        	npt9.BILLING_CONTACTA,
                            npt9.BILLING_CONTACTB,
                    	    npt5.INVOICE_BALANCE,
                    	    npt1.DATE_CREATED,
                    	    npt1.INVOICE_ID,
                    	    npm6.PAYMENT_TERMS_NAME,
                    	    npm6.DAYS
                        FROM
                        	NPT001 npt1,
                        	NPT005 npt5,
                        	NPT009 npt9,
                            NPT038 npt38,
                        	NPM006 npm6
                        WHERE
                        	npt1.customer_id = ' || p_customer_id || ' AND
                        	npt9.customer_id =' || p_customer_id || ' AND
                         	npt1.INVOICE_ID = npt38.INVOICE_ID AND
                            npt38.COLLECTION_ID = npt5.COLLECTION_ID AND
                        	npt9.PAYMENT_TERMS_ID = npm6.PAYMENT_TERMS_ID AND
                            npt1.DATE_CREATED + npm6.DAYS >= SYSDATE';

    l_query_thirty :=   'SELECT
                    	    npt9.LEGAL_NAME AS "Subsidiary",
                        	npt9.BILLING_CONTACTA,
                            npt9.BILLING_CONTACTB,
                    	    npt5.INVOICE_BALANCE,
                    	    npt1.DATE_CREATED,
                    	    npt1.INVOICE_ID,
                    	    npm6.PAYMENT_TERMS_NAME,
                    	    npm6.DAYS
                        FROM
                        	NPT001 npt1,
                        	NPT005 npt5,
                        	NPT009 npt9,
                            NPT038 npt38,
                        	NPM006 npm6
                        WHERE
                        	npt1.customer_id = ' || p_customer_id || ' AND
                        	npt9.customer_id =' || p_customer_id || ' AND
                         	npt1.INVOICE_ID = npt38.INVOICE_ID AND
                            npt38.COLLECTION_ID = npt5.COLLECTION_ID AND
                        	npt9.PAYMENT_TERMS_ID = npm6.PAYMENT_TERMS_ID AND
                            npt1.DATE_CREATED + npm6.DAYS < SYSDATE AND
                            CAST(SYSDATE - (npt1.DATE_CREATED + npm6.DAYS) AS INT) < 31';
    
    l_query_sixty :=    'SELECT
                    	    npt9.LEGAL_NAME AS "Subsidiary",
                        	npt9.BILLING_CONTACTA,
                            npt9.BILLING_CONTACTB,
                    	    npt5.INVOICE_BALANCE,
                    	    npt1.DATE_CREATED,
                    	    npt1.INVOICE_ID,
                    	    npm6.PAYMENT_TERMS_NAME,
                    	    npm6.DAYS
                        FROM
                        	NPT001 npt1,
                        	NPT005 npt5,
                        	NPT009 npt9,
                            NPT038 npt38,
                        	NPM006 npm6
                        WHERE
                        	npt1.customer_id = ' || p_customer_id || ' AND
                        	npt9.customer_id =' || p_customer_id || ' AND
                         	npt1.INVOICE_ID = npt38.INVOICE_ID AND
                            npt38.COLLECTION_ID = npt5.COLLECTION_ID AND
                        	npt9.PAYMENT_TERMS_ID = npm6.PAYMENT_TERMS_ID AND
                            CAST(SYSDATE - (npt1.DATE_CREATED + npm6.DAYS) AS INT) > 30 AND
                            CAST(SYSDATE - (npt1.DATE_CREATED + npm6.DAYS) AS INT) < 61';

    OPEN v_cur FOR l_query_current;
    LOOP
        FETCH 
            v_cur
        INTO 
            v_eom_rec.legal_name, 
            v_eom_rec.billing_contact_a,
            v_eom_rec.billing_contact_b,    
            v_eom_rec.balance_current,                    
            v_eom_rec.date_created,                       
            v_eom_rec.invoice_id,
            v_eom_rec.payment_terms_name,
            v_eom_rec.days;     

        EXIT WHEN v_cur%NOTFOUND;     
        PIPE ROW(v_eom_rec);        
    END LOOP;
    CLOSE v_cur;

    OPEN v_cur FOR l_query_thirty;
    LOOP
        FETCH 
            v_cur
        INTO 
            v_eom_rec.legal_name, 
            v_eom_rec.billing_contact_a,
            v_eom_rec.billing_contact_b,    
            v_eom_rec.balance_thirty,                    
            v_eom_rec.date_created,                       
            v_eom_rec.invoice_id,
            v_eom_rec.payment_terms_name,
            v_eom_rec.days;     

        EXIT WHEN v_cur%NOTFOUND;     
        PIPE ROW(v_eom_rec);        
    END LOOP;
    CLOSE v_cur;

    OPEN v_cur FOR l_query_sixty;
    LOOP
        FETCH 
            v_cur
        INTO 
            v_eom_rec.legal_name, 
            v_eom_rec.billing_contact_a,
            v_eom_rec.billing_contact_b,    
            v_eom_rec.balance_sixty,                    
            v_eom_rec.date_created,                       
            v_eom_rec.invoice_id,
            v_eom_rec.payment_terms_name,
            v_eom_rec.days;     

        EXIT WHEN v_cur%NOTFOUND;     
        PIPE ROW(v_eom_rec);        
    END LOOP;
    CLOSE v_cur;

    END EOM_TABLE;

    FUNCTION get_breakdown (
        p_soa_customer_id NUMBER,
        p_soa_payment_terms_id NUMBER,
        p_soa_breakdown_number NUMBER
    )
    return NUMBER
    as
        v_breakdown NUMBER := 0;
        v_credit NUMBER := 0;
    begin
    IF p_soa_breakdown_number = 1 THEN
        SELECT
            SUM(npt1.OUTSTANDING_BALANCE)
        INTO
            v_breakdown
        FROM
            NPT001 npt1,
            NPM006 npm6
        WHERE 
            npt1.CUSTOMER_ID = p_soa_customer_id AND
            npm6.PAYMENT_TERMS_ID = p_soa_payment_terms_id AND
            npt1.DATE_CREATED + npm6.DAYS >= SYSDATE;
        
        SELECT
            SUM(npt15.current_balance)
        INTO
            v_credit
        FROM
            NPT015 npt15,
            NPM006 npm6
        WHERE
            npt15.customer_id = p_soa_customer_id AND 
            npm6.PAYMENT_TERMS_ID = p_soa_payment_terms_id AND
            npt15.DATE_CREATED + npm6.DAYS >= SYSDATE;

    ELSIF p_soa_breakdown_number = 2 THEN
        SELECT
            SUM(npt1.OUTSTANDING_BALANCE)
        INTO
            v_breakdown
        FROM
            NPT001 npt1,
            NPM006 npm6
        WHERE 
            npt1.CUSTOMER_ID = p_soa_customer_id AND
            npm6.PAYMENT_TERMS_ID = p_soa_payment_terms_id AND
            npt1.DATE_CREATED + npm6.DAYS < SYSDATE AND
            CAST(SYSDATE - (npt1.DATE_CREATED + npm6.DAYS) AS INT) < 31;
        
        SELECT
            SUM(npt15.current_balance)
        INTO
            v_credit
        FROM
            NPT015 npt15,
            NPM006 npm6
        WHERE
            npt15.customer_id = p_soa_customer_id AND 
            npm6.PAYMENT_TERMS_ID = p_soa_payment_terms_id AND
            npt15.DATE_CREATED + npm6.DAYS < SYSDATE AND
            CAST(SYSDATE - (npt15.DATE_CREATED + npm6.DAYS) AS INT) < 31;
    
    ELSIF p_soa_breakdown_number = 3 THEN
        SELECT
            SUM(npt1.OUTSTANDING_BALANCE)
        INTO
            v_breakdown
        FROM
            NPT001 npt1,
            NPM006 npm6
        WHERE
            npt1.CUSTOMER_ID = p_soa_customer_id AND
            npm6.PAYMENT_TERMS_ID = p_soa_payment_terms_id AND
            CAST(SYSDATE - (npt1.DATE_CREATED + npm6.DAYS) AS INT) > 30 AND
            CAST(SYSDATE - (npt1.DATE_CREATED + npm6.DAYS) AS INT) < 61;
        
        SELECT
            SUM(npt15.current_balance)
        INTO
            v_credit
        FROM
            NPT015 npt15,
            NPM006 npm6
        WHERE
            npt15.customer_id = p_soa_customer_id AND 
            npm6.PAYMENT_TERMS_ID = p_soa_payment_terms_id AND
            CAST(SYSDATE - (npt15.DATE_CREATED + npm6.DAYS) AS INT) > 30 AND
            CAST(SYSDATE - (npt15.DATE_CREATED + npm6.DAYS) AS INT) < 61;

    ELSIF p_soa_breakdown_number = 4 THEN
        SELECT
            SUM(npt1.OUTSTANDING_BALANCE)
        INTO
            v_breakdown
        FROM
            NPT001 npt1,
            NPM006 npm6
        WHERE 
            npt1.CUSTOMER_ID = p_soa_customer_id AND
            npm6.PAYMENT_TERMS_ID = p_soa_payment_terms_id AND
            npt1.DATE_CREATED + npm6.DAYS < SYSDATE AND
            CAST(SYSDATE - (npt1.DATE_CREATED + npm6.DAYS) AS INT) >= 61;
        
        SELECT
            SUM(npt15.current_balance)
        INTO
            v_credit
        FROM
            NPT015 npt15,
            NPM006 npm6
        WHERE
            npt15.customer_id = p_soa_customer_id AND 
            npm6.PAYMENT_TERMS_ID = p_soa_payment_terms_id AND
            npt15.DATE_CREATED + npm6.DAYS < SYSDATE AND
            CAST(SYSDATE - (npt15.DATE_CREATED + npm6.DAYS) AS INT) >= 61;
        
    END IF; 

    IF v_breakdown IS NULL THEN
        v_breakdown := 0;
    END IF;

    IF v_credit IS NULL THEN
        v_credit := 0;

    END IF;    
        RETURN v_breakdown - v_credit;

    END get_breakdown;


    FUNCTION get_breakdown_customers (
        p_soa_customer_id NUMBER,
        p_soa_breakdown_number NUMBER
    )
    return NUMBER
    as
        v_breakdown NUMBER := 0;
        v_credit NUMBER := 0;
    begin
    IF p_soa_breakdown_number = 1 THEN
        SELECT
            SUM(npt1.OUTSTANDING_BALANCE)
        INTO
            v_breakdown
        FROM
            NPT001 npt1,
            NPT009 npt9_M,
            NPT009 npt9_S,
            NPM006 npm6
        WHERE
            npt9_M.CUSTOMER_ID = p_soa_customer_id AND
            npt9_S.MAIN_ACCOUNT_CODE = npt9_M.CUSTOMER_CODE AND
            npt1.CUSTOMER_ID = npt9_S.CUSTOMER_ID AND
            npm6.PAYMENT_TERMS_ID = npt9_S.PAYMENT_TERMS_ID AND
            npt1.DATE_CREATED + npm6.DAYS >= SYSDATE;
        
        SELECT
            SUM(npt15.current_balance)
        INTO
            v_credit
        FROM
            NPT009 npt9_M,
            NPT009 npt9_S,
            NPT015 npt15,
            NPM006 npm6
        WHERE
            npt9_M.CUSTOMER_ID = p_soa_customer_id AND
            npt9_S.MAIN_ACCOUNT_CODE = npt9_M.CUSTOMER_CODE AND
            npt15.CUSTOMER_ID = npt9_S.CUSTOMER_ID AND
            npm6.PAYMENT_TERMS_ID = npt9_S.PAYMENT_TERMS_ID AND
            npt15.DATE_CREATED + npm6.DAYS >= SYSDATE;

    ELSIF p_soa_breakdown_number = 2 THEN
        SELECT
            SUM(npt1.OUTSTANDING_BALANCE)
        INTO
            v_breakdown
        FROM
            NPT001 npt1,
            NPT009 npt9_M,
            NPT009 npt9_S,
            NPM006 npm6
        WHERE 
            npt9_M.CUSTOMER_ID = p_soa_customer_id AND
            npt9_S.MAIN_ACCOUNT_CODE = npt9_M.CUSTOMER_CODE AND
            npt1.CUSTOMER_ID = npt9_S.CUSTOMER_ID AND
            npm6.PAYMENT_TERMS_ID = npt9_S.PAYMENT_TERMS_ID AND
            npt1.DATE_CREATED + npm6.DAYS < SYSDATE AND
            CAST(SYSDATE - (npt1.DATE_CREATED + npm6.DAYS) AS INT) < 31;
        
        SELECT
            SUM(npt15.current_balance)
        INTO
            v_credit
        FROM
            NPT009 npt9_M,
            NPT009 npt9_S,
            NPT015 npt15,
            NPM006 npm6
        WHERE
            npt9_M.CUSTOMER_ID = p_soa_customer_id AND
            npt9_S.MAIN_ACCOUNT_CODE = npt9_M.CUSTOMER_CODE AND
            npt15.CUSTOMER_ID = npt9_S.CUSTOMER_ID AND
            npm6.PAYMENT_TERMS_ID = npt9_S.PAYMENT_TERMS_ID AND
            npt15.DATE_CREATED + npm6.DAYS < SYSDATE AND
            CAST(SYSDATE - (npt15.DATE_CREATED + npm6.DAYS) AS INT) < 31;
    
    ELSIF p_soa_breakdown_number = 3 THEN
        SELECT
            SUM(npt1.OUTSTANDING_BALANCE)
        INTO
            v_breakdown
        FROM
            NPT001 npt1,
            NPT009 npt9_M,
            NPT009 npt9_S,
            NPM006 npm6
        WHERE
            npt9_M.CUSTOMER_ID = p_soa_customer_id AND
            npt9_S.MAIN_ACCOUNT_CODE = npt9_M.CUSTOMER_CODE AND
            npt1.CUSTOMER_ID = npt9_S.CUSTOMER_ID AND
            npm6.PAYMENT_TERMS_ID = npt9_S.PAYMENT_TERMS_ID AND
            npt1.DATE_CREATED + npm6.DAYS < SYSDATE AND
            CAST(SYSDATE - (npt1.DATE_CREATED + npm6.DAYS) AS INT) > 30 AND
            CAST(SYSDATE - (npt1.DATE_CREATED + npm6.DAYS) AS INT) < 61;

            SELECT
                SUM(npt15.current_balance)
            INTO
                v_credit
            FROM
                NPT009 npt9_M,
                NPT009 npt9_S,
                NPT015 npt15,
                NPM006 npm6
            WHERE
                npt9_M.CUSTOMER_ID = p_soa_customer_id AND
                npt9_S.MAIN_ACCOUNT_CODE = npt9_M.CUSTOMER_CODE AND
                npt15.CUSTOMER_ID = npt9_S.CUSTOMER_ID AND
                npm6.PAYMENT_TERMS_ID = npt9_S.PAYMENT_TERMS_ID AND
                npt15.DATE_CREATED + npm6.DAYS < SYSDATE AND
                CAST(SYSDATE - (npt15.DATE_CREATED + npm6.DAYS) AS INT) > 30 AND
                CAST(SYSDATE - (npt15.DATE_CREATED + npm6.DAYS) AS INT) < 61;

    ELSIF p_soa_breakdown_number = 4 THEN
        SELECT
            SUM(npt1.OUTSTANDING_BALANCE)
        INTO
            v_breakdown
        FROM
            NPT001 npt1,
            NPT009 npt9_M,
            NPT009 npt9_S,
            NPM006 npm6
        WHERE 
            npt9_M.CUSTOMER_ID = p_soa_customer_id AND
            npt9_S.MAIN_ACCOUNT_CODE = npt9_M.CUSTOMER_CODE AND
            npt1.CUSTOMER_ID = npt9_S.CUSTOMER_ID AND
            npm6.PAYMENT_TERMS_ID = npt9_S.PAYMENT_TERMS_ID AND
            npt1.DATE_CREATED + npm6.DAYS < SYSDATE AND
            CAST(SYSDATE - (npt1.DATE_CREATED + npm6.DAYS) AS INT) >= 61;

        SELECT
            SUM(npt15.current_balance)
        INTO
            v_credit
        FROM
            NPT009 npt9_M,
            NPT009 npt9_S,
            NPT015 npt15,
            NPM006 npm6
        WHERE
            npt9_M.CUSTOMER_ID = p_soa_customer_id AND
            npt9_S.MAIN_ACCOUNT_CODE = npt9_M.CUSTOMER_CODE AND
            npt15.CUSTOMER_ID = npt9_S.CUSTOMER_ID AND
            npm6.PAYMENT_TERMS_ID = npt9_S.PAYMENT_TERMS_ID AND
            npt15.DATE_CREATED + npm6.DAYS < SYSDATE AND
            CAST(SYSDATE - (npt15.DATE_CREATED + npm6.DAYS) AS INT) >= 61;
    END IF; 

    IF v_breakdown IS NULL THEN
        v_breakdown := 0;
    END IF;

    IF v_credit IS NULL THEN
        v_credit := 0;
    END IF;      
        RETURN v_breakdown - v_credit;

    END get_breakdown_customers;

    FUNCTION get_breakdown_customers_sum (
        p_soa_customer_id NUMBER,
        p_soa_payment_terms_id NUMBER
    )
    return NUMBER
    as
        v_sum NUMBER := 0;
        v_holder NUMBER := 0;
    BEGIN
        FOR i in 1..4 LOOP
            SELECT soa_breakdown_records.get_breakdown(p_soa_customer_id, p_soa_payment_terms_id, i) INTO v_holder FROM dual;
            v_sum := v_sum + v_holder;
        END LOOP;
    
        RETURN v_sum;
    END get_breakdown_customers_sum;

END SOA_BREAKDOWN_RECORDS;
/



create or replace package body "SHIPMENT_RECORDS_PKG" 
as
    FUNCTION get_first_vendor (
        p_shipment_id       nit016.shipment_id%TYPE
    )
    return VARCHAR2
    as
        v_vendor            nit006.vendor_name%TYPE;
    begin
        SELECT c.vendor_name
          INTO v_vendor
          FROM nit015 b,
               nit006 c
         WHERE b.vendor_id = c.vendor_id
           AND b.shipment_id = p_shipment_id
           AND b.vendor_sequence = 1;
        
        RETURN v_vendor;
    end get_first_vendor;

    FUNCTION get_shipment_records (
        p_search        VARCHAR2,
        p_sort_col      VARCHAR2,
        p_month         VARCHAR2
    )
    RETURN shipment_tab PIPELINED
    as
        TYPE cur IS REF CURSOR;
        v_cur           cur;
        
        v_query         VARCHAR2(2000);
        v_rec           shipment_rec;
    begin
        v_query := 'SELECT a.shipment_id,
                           c.vendor_code vendor_code,
                           c.vendor_name vendor,
                           TO_NUMBER(SUBSTR(a.shipment_number, 6, 3), ''999'') ship_no,
                           a.shipment_number, a.vessel_name, a.vessel_bl_no,
                           case when a.is_posted = ''Y'' THEN ''P'' 
                                when a.is_received = ''Y'' THEN ''R''
                                else null
                                end p,
                           a.etd, 
                           a.eta,
                           a.container_no
                      FROM nit016 a,
                           nit015 b,
                           nit006 c
                     WHERE a.shipment_id = b.shipment_id
                       AND b.vendor_id = c.vendor_id
                       AND b.vendor_sequence = 1 
                       AND SUBSTR(a.shipment_number, 0, 4) = ''' || p_search || ''' ';

        IF p_month IS NOT NULL THEN
            v_query := v_query || ' AND EXTRACT(MONTH FROM a.eta) = ' || p_month || ' 
                                    AND EXISTS (SELECT x.container_no, COUNT(x.container_no)
                                                  FROM nit016 x
                                                 WHERE x.container_no = a.container_no
                                              GROUP BY x.container_no
                                              HAVING COUNT(x.container_no) > 1)';
        END IF;

        IF p_sort_col IS NOT NULL THEN
            IF p_sort_col = '1' THEN
                v_query := v_query || ' ORDER BY c.vendor_code ';
            ELSIF p_sort_col = '2' THEN
                v_query := v_query || ' ORDER BY a.shipment_number ';
            ELSIF p_sort_col = '3' THEN
                v_query := v_query || ' ORDER BY a.eta ';
            ELSE
                v_query := v_query || ' ORDER BY a.container_no ';
            END IF;
        ELSE 
            v_query := v_query || ' ORDER BY c.vendor_code ';
        END IF;

        OPEN v_cur FOR v_query;
        LOOP
            FETCH v_cur INTO v_rec.shipment_id, v_rec.vendor_code, v_rec.vendor, v_rec.ship_no, v_rec.shipment_number,
                             v_rec.vessel_name, v_rec.vessel_bl_no, v_rec.p, v_rec.etd, v_rec.eta, v_rec.container_no;
            EXIT WHEN v_cur%NOTFOUND;

            v_rec.month_s := CASE WHEN p_month IS NOT NULL THEN TRIM(TO_CHAR(TO_DATE(p_month || '/' || p_search, 'MM/YYYY'), 'MONTH'))
                                  ELSE null
                                  END;

            PIPE ROW (v_rec);
        END LOOP;
        CLOSE v_cur;
    end get_shipment_records;

    FUNCTION get_shipment_vendor_basic_info (
        p_shipment_id   nit016.shipment_id%TYPE
    )
    RETURN vendor_shipment_tab PIPELINED
    as
        v_rec           vendor_shipment_rec;
    begin
        for x in (select a.svp_id, a.vendor_id, b.vendor_name, a.vendor_sequence, a.po_id
                    from nit015 a,
                         nit006 b
                   where a.vendor_id = b.vendor_id
                     and a.shipment_id = p_shipment_id
                   order by a.vendor_sequence ASC)
        loop
            v_rec.svp_id := x.svp_id;
            v_rec.vendor_id := x.vendor_id;
            v_rec.vendor_name := x.vendor_name;
            v_rec.vendor_sequence := x.vendor_sequence;
            v_rec.po_id := x.po_id;

            -- retrive invoices
            select LISTAGG(b.document_number, ',')
              into v_rec.invoices
              from nit035 a,
                   nit036 b
             where a.invoice_id = b.invoice_id
               and a.svp_id = x.svp_id;

            PIPE ROW (v_rec);
        end loop;
    end get_shipment_vendor_basic_info;

    FUNCTION get_next_shipment_item_id (
        p_shipment_id   nit016.shipment_id%TYPE
    )
    RETURN number
    as
        v_id            nit018.shipment_items_id%TYPE;
    begin
        SELECT NVL(MAX(shipment_items_id), 0) + 1
          INTO v_id
          FROM nit018
         WHERE shipment_id = p_shipment_id;

        RETURN v_id;
    end get_next_shipment_item_id;

    FUNCTION save_shipment (
        p_clob_data         clob
    )
    RETURN nit016.shipment_id%TYPE
    as
        s_json                  json_object_t;

        v_shipment_id           nit016.shipment_id%TYPE;
        v_shipment_no           nit016.shipment_number%TYPE;
        v_vessel_name           nit016.vessel_name%TYPE;
        v_vessel_bl_no          nit016.vessel_bl_no%TYPE;
        v_barge                 nit016.barge%TYPE;
        v_barge_bl_no           nit016.barge_bl_no%TYPE;
        v_container_type        nit016.container_type%TYPE;
        v_container_no          nit016.container_no%TYPE;
        v_origin                nit016.origin%TYPE;
        v_eta                   varchar2(15);
        v_etd                   varchar2(15);
        v_ata                   varchar2(15);
        v_freight_cost          nit017.freight_cost%TYPE;
        v_insurance_cost        nit017.insurance_cost%TYPE;
        v_handling_cost         nit017.handling_cost%TYPE;
        v_duties_and_taxes      nit017.duties_and_taxes%TYPE;
        v_misc_expenses         nit017.misc_expenses%TYPE;
        v_vendor_credits        nit017.vendor_credits%TYPE;
    begin
        s_json := json_object_t.parse(p_clob_data);

        v_shipment_id       := s_json.get_number('shipmentId');
        v_shipment_no       := s_json.get_string('shipmentNo');
        v_vessel_name       := s_json.get_string('vessel');
        v_vessel_bl_no      := s_json.get_string('vesselBlNo');
        v_barge             := s_json.get_string('barge');
        v_barge_bl_no       := s_json.get_string('bargeBlNo');
        v_container_type    := s_json.get_string('containerType');
        v_container_no      := s_json.get_string('containerNo');
        v_origin            := s_json.get_string('origin');
        v_etd               := s_json.get_string('etd');
        v_eta               := s_json.get_string('eta');
        v_ata               := s_json.get_string('ata');

        v_freight_cost      := s_json.get_number('freightCost');
        v_insurance_cost    := s_json.get_number('insuranceCost');
        v_handling_cost     := s_json.get_number('handlingCost');
        v_duties_and_taxes  := s_json.get_number('dutiesAndTaxes');
        v_misc_expenses     := s_json.get_number('miscExpenses');
        v_vendor_credits    := s_json.get_number('vendorCredits');

        v_shipment_id := shipment_records_pkg.save_basic_info(
            v_shipment_id, 
            v_shipment_no,
            v_vessel_name,
            v_vessel_bl_no,
            v_barge, 
            v_barge_bl_no,
            v_container_type,
            v_container_no,
            v_origin,
            v_eta,
            v_etd,
            v_ata,
            v_freight_cost,
            v_insurance_cost, 
            v_handling_cost,
            v_duties_and_taxes,
            v_misc_expenses,
            v_vendor_credits 
        );

        shipment_records_pkg.save_vendor_po2(v_shipment_id, p_clob_data);

        return v_shipment_id;
    end save_shipment;

    FUNCTION save_basic_info (
        p_shipment_id       nit016.shipment_id%TYPE,
        p_shipment_no       nit016.shipment_number%TYPE,
        p_vessel_name       nit016.vessel_name%TYPE,
        p_vessel_bl_no      nit016.vessel_bl_no%TYPE,
        p_barge             nit016.barge%TYPE,
        p_barge_bl_no       nit016.barge_bl_no%TYPE,
        p_container_type    nit016.container_type%TYPE,
        p_container_no      nit016.container_no%TYPE,
        p_origin            nit016.origin%TYPE,
        p_eta               varchar2,
        p_etd               varchar2,
        p_ata               varchar2,
        p_freight_cost      nit017.freight_cost%TYPE,
        p_insurance_cost    nit017.insurance_cost%TYPE,
        p_handling_cost     nit017.handling_cost%TYPE,
        p_duties_and_taxes  nit017.duties_and_taxes%TYPE,
        p_misc_expenses     nit017.misc_expenses%TYPE,
        p_vendor_credits    nit017.vendor_credits%TYPE
    )
    RETURN nit016.shipment_id%TYPE
    as
        v_shipment_id       nit016.shipment_id%TYPE := p_shipment_id;
    begin
        if v_shipment_id is not null then
            UPDATE nit016 
               SET shipment_number = p_shipment_no,
                   vessel_name = p_vessel_name,
                   vessel_bl_no = p_vessel_bl_no,
                   barge = p_barge,
                   barge_bl_no = p_barge_bl_no,
                   container_type = p_container_type,
                   container_no = p_container_no,
                   origin = p_origin,
                   eta = TO_DATE(p_eta, 'MM/DD/YYYY'),
                   etd = TO_DATE(p_etd, 'MM/DD/YYYY'),
                   ata = TO_DATE(p_ata, 'MM/DD/YYYY')
             WHERE shipment_id = v_shipment_id;

            UPDATE nit017
               SET freight_cost = p_freight_cost,
                   insurance_cost = p_insurance_cost,
                   handling_cost = p_handling_cost,
                   duties_and_taxes = p_duties_and_taxes,
                   misc_expenses = p_misc_expenses,
                   vendor_credits = p_vendor_credits
             WHERE shipment_id = p_shipment_id;
        else 
            INSERT INTO nit016 (shipment_number, vessel_name, vessel_bl_no, barge, barge_bl_no,
                                container_type, container_no, origin, eta, etd, ata)
                VALUES (p_shipment_no, p_vessel_name, p_vessel_bl_no, p_barge, p_barge_bl_no,
                        p_container_type, p_container_no, p_origin, p_eta, p_etd, p_ata)
                RETURNING shipment_id INTO v_shipment_id;

            INSERT INTO nit017(shipment_id, freight_cost, insurance_cost, handling_cost,
                               duties_and_taxes, misc_expenses, vendor_credits)
                VALUES (v_shipment_id, p_freight_cost, p_insurance_cost, p_handling_cost,
                        p_duties_and_taxes, p_misc_expenses, p_vendor_credits);
        end if;

        return v_shipment_id;
    end save_basic_info;

    PROCEDURE save_vendor_po (
        p_shipment_id       nit016.shipment_id%TYPE,
        p_clob_data         clob
    )
    as
        TYPE inv_nos_t IS TABLE OF nit036.document_number%TYPE INDEX BY PLS_INTEGER; 
        l_inv_nos   inv_nos_t;

        TYPE inv_ids_t IS TABLE OF nit036.invoice_id%TYPE INDEX BY PLS_INTEGER; 
        l_inv_ids   inv_ids_t;

        v_inv_id    nit036.invoice_id%TYPE;
        v_old_po    nit015.po_id%TYPE;
        v_svp_id    nit015.svp_id%TYPE;
    begin
        FOR vendor IN (
            SELECT jt.*,
                   vendor_id || '-' || po_id || '-' || svp_id vps, 
                   LAG(vendor_id || '-' || po_id || '-' || svp_id, 1) OVER (ORDER BY vendor_id, po_id, svp_id) prev_vps
            FROM JSON_TABLE (
                p_clob_data, '$.vendors[*]'
                COLUMNS (
                    svp_id          NUMBER          PATH '$.svpId',
                    vendor_id       NUMBER          PATH '$.vendorId',
                    vendor_seq      NUMBER          PATH '$.vendorSeq',
                    po_id           varchar2(15)    PATH '$.poId',
                    inv_nos         varchar2(4000)  PATH '$.invNos'
                )
            ) AS jt
        ) 
        LOOP
            v_svp_id := vendor.svp_id;

            BEGIN
                SELECT po_id
                  INTO v_old_po
                  FROM nit015
                 WHERE shipment_id = p_shipment_id
                   AND svp_id = v_svp_id;
            EXCEPTION
                WHEN NO_DATA_FOUND THEN
                    v_old_po := null;
            END;

            SELECT *
              BULK COLLECT INTO l_inv_nos
              FROM TABLE (string_fnc.split_string_pipelined(vendor.inv_nos, ','));

            IF v_svp_id IS NOT NULL THEN 
                UPDATE nit015
                   SET po_id = vendor.po_id
                 WHERE shipment_id = p_shipment_id
                   AND svp_id = v_svp_id;
                
                SELECT invoice_id
                  BULK COLLECT INTO l_inv_ids
                  FROM nit035
                 WHERE svp_id = v_svp_id;

                DELETE FROM nit035 
                 WHERE svp_id = v_svp_id;
                
                FORALL l_index IN 1 .. l_inv_ids.COUNT
                    DELETE FROM nit036
                     WHERE invoice_id = l_inv_ids (l_index);
            ELSE
                INSERT INTO nit015 (shipment_id, vendor_id, vendor_sequence, po_id)
                VALUES (p_shipment_id, vendor.vendor_id, vendor.vendor_seq, vendor.po_id)
                RETURNING svp_id INTO v_svp_id;
            END IF;

            FOR indx IN 1 .. l_inv_nos.COUNT
            LOOP
                v_inv_id := NULL;

                INSERT INTO nit036 (document_number)
                VALUES(l_inv_nos (indx))
                RETURNING invoice_id INTO v_inv_id;

                INSERT INTO nit035(svp_id, invoice_id)
                VALUES (v_svp_id, v_inv_id);
            END LOOP;

            IF v_old_po IS NOT NULL THEN
                -- po is updated / replaced
                IF v_old_po != vendor.po_id THEN
                    -- delete line items from previous PO
                    DELETE FROM nit018 
                    WHERE po_id = v_old_po;

                    -- insert items from new PO
                    INSERT INTO nit018 (shipment_id, po_id, item_id, qty, cost, uom_id)
                    SELECT p_shipment_id, vendor.po_id, item_id, qty, internal_price, internal_uom_id
                      FROM nit013
                     WHERE po_id = vendor.po_id;
                END IF;
            ELSE
                INSERT INTO nit018 (shipment_id, po_id, item_id, qty, cost, uom_id)
                SELECT p_shipment_id, vendor.po_id, item_id, qty, internal_price, internal_uom_id
                  FROM nit013
                 WHERE po_id = vendor.po_id;
            END IF;
        END LOOP;
    end save_vendor_po;

    PROCEDURE save_vendor_po2 (
        p_shipment_id       nit016.shipment_id%TYPE,
        p_clob_data         clob
    )
    as
        v_inv_id    nit036.invoice_id%TYPE;
        v_old_po    nit015.po_id%TYPE;
        v_svp_id    nit015.svp_id%TYPE;
        v_vps       VARCHAR2(200);

        v_sitem_id  nit018.shipment_items_id%TYPE;
    begin
        FOR vendor IN (
            SELECT jt.*,
                   svp_id || '-' ||vendor_id || '-' || po_id vps, 
                   LAG(svp_id || '-' ||vendor_id || '-' || po_id, 1) OVER (ORDER BY svp_id nulls last, vendor_id, po_id, inv_status desc ) prev_vps
            FROM JSON_TABLE (
                p_clob_data, '$.vendors[*]'
                COLUMNS (
                    svp_id          NUMBER          PATH '$.svpId',
                    vendor_id       NUMBER          PATH '$.vendorId',
                    vendor_seq      NUMBER          PATH '$.vendorSeq',
                    po_id           varchar2(15)    PATH '$.poId',
                    inv_nos         varchar2(4000)  PATH '$.invNos',
                    NESTED PATH '$.invoices[*]'
                        COLUMNS (
                            invoice_id   NUMBER         PATH '$.invoiceId',
                            doc_no       VARCHAR2(10)   PATH '$.docNo',
                            inv_status   VARCHAR2(1)    PATH '$.status'
                        )
                )
            ) AS jt
        ) 
        LOOP
            v_vps := vendor.vps;

            IF v_vps != NVL(vendor.prev_vps, '@@x@@') THEN
                v_svp_id := vendor.svp_id;

                BEGIN
                    SELECT po_id
                      INTO v_old_po
                      FROM nit015
                     WHERE shipment_id = p_shipment_id
                       AND svp_id = v_svp_id;
                EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                        v_old_po := null;
                END;

                IF v_svp_id IS NOT NULL THEN 
                    UPDATE nit015
                       SET po_id = vendor.po_id
                     WHERE shipment_id = p_shipment_id
                       AND svp_id = v_svp_id;
                ELSE
                    INSERT INTO nit015 (shipment_id, vendor_id, vendor_sequence, po_id)
                    VALUES (p_shipment_id, vendor.vendor_id, vendor.vendor_seq, vendor.po_id)
                    RETURNING svp_id INTO v_svp_id;
                END IF;                

                IF v_old_po IS NOT NULL THEN
                    -- po is updated / replaced
                    IF v_old_po != vendor.po_id THEN
                        -- delete line items from previous PO
                        DELETE FROM nit018 
                        WHERE po_id = v_old_po;

                        -- insert items from new PO
                        IF vendor.po_id IS NOT NULL THEN
                            v_sitem_id := shipment_records_pkg.get_next_shipment_item_id(p_shipment_id);

                            INSERT INTO nit018 (shipment_id, shipment_items_id, po_id, item_id, qty, cost, uom_id)
                            SELECT p_shipment_id, v_sitem_id, vendor.po_id, item_id, qty, internal_price, internal_uom_id
                              FROM nit013
                             WHERE po_id = vendor.po_id;
                        END IF;
                    END IF;
                ELSE
                    v_sitem_id := shipment_records_pkg.get_next_shipment_item_id(p_shipment_id);

                    INSERT INTO nit018 (shipment_id, shipment_items_id, po_id, item_id, qty, cost, uom_id)
                    SELECT p_shipment_id, v_sitem_id, vendor.po_id, item_id, qty, internal_price, internal_uom_id
                      FROM nit013
                     WHERE po_id = vendor.po_id;
                END IF;
            END IF;

            IF vendor.invoice_id IS NOT NULL AND vendor.inv_status = 'D' THEN
                DELETE FROM nit035
                 WHERE invoice_id = vendor.invoice_id;

                DELETE FROM nit036
                 WHERE invoice_id = vendor.invoice_id;
            ELSIF vendor.invoice_id IS NULL AND vendor.inv_status = 'N' THEN
                IF vendor.doc_no IS NULL OR LENGTH(vendor.doc_no) > 15 THEN
                    raise_application_error(-20001, 'One or more of the vendor invoice numbers submitted is invalid.');
                END IF;

                INSERT INTO nit036 (document_number)
                VALUES (vendor.doc_no)
                RETURNING invoice_id INTO v_inv_id;

                INSERT INTO nit035 (svp_id, invoice_id)
                VALUES (v_svp_id, v_inv_id);
            END IF;
        END LOOP;
    end save_vendor_po2;

    PROCEDURE save_serial_numbers (
        p_shipment_id           nit026.shipment_id%TYPE,
        p_shipment_items_id     nit026.shipment_items_id%TYPE,
        p_collection_name       varchar2
    )
    as
    begin
        for x in (select c001 serial_number, n003 sn_id
                    from apex_collections
                   where collection_name = p_collection_name
                     and c001 is not null)
        loop
            merge into nit026
            using dual
               on (serial_number_id = x.sn_id and
                   shipment_id = p_shipment_id and
                   shipment_items_id = p_shipment_items_id)
            when matched then
                update set serial_number = x.serial_number
            when not matched then
                insert (shipment_id, shipment_items_id, serial_number)
                values (p_shipment_id, p_shipment_items_id, x.serial_number)
            ;
        end loop;
    end save_serial_numbers;

    FUNCTION receive_shipment (
        p_shipment_id       nit016.shipment_id%TYPE,
        p_warehouse_id      nit016.warehouse_id%TYPE
    )
    RETURN varchar2
    as
        v_received          nit016.is_received%TYPE := 'N';
        v_posted            nit016.is_posted%TYPE := 'N';
        v_ship_no           nit016.shipment_number%TYPE;
        v_message           varchar2(100) := 'OK';
    begin
        select is_received, is_posted, shipment_number
          into v_received, v_posted, v_ship_no
          from nit016
         where shipment_id = p_shipment_id;

        if v_received = 'N' and v_posted = 'N' then
            for x in (select a.item_id, a.qty, b.uom_id
                        from nit018 a,
                             nit002 b
                       where a.item_id = b.item_id
                         and b."LEVEL" = 4
                         and a.shipment_id = p_shipment_id)
            loop
                merge into nit004
                using dual
                   on (item_id = x.item_id and
                       warehouse_id = p_warehouse_id and
                       uom_id = x.uom_id)
                when matched then
                    update 
                       set qty = qty + x.qty,
                           update_date = sysdate,
                           update_user = v('APP_USER')
                when not matched then
                    insert (item_id, warehouse_id, uom_id, qty, create_user, create_date, update_user, update_date)
                    values (x.item_id, p_warehouse_id, x.uom_id, x.qty, v('APP_USER'), sysdate, v('APP_USER'), sysdate);
            end loop;

            update nit016
               set is_received = 'Y',
                   warehouse_id = p_warehouse_id
             where shipment_id = p_shipment_id;
        else
            v_message := 'Shipment No. ' || v_ship_no || '  is already ' || CASE WHEN v_posted = 'Y' THEN 'posted'
                                                                                 WHEN v_received = 'Y' THEN 'received'
                                                                                 END;
        end if;

        return v_message;
    exception
        when no_data_found then
            return 'Shipment does not exist';
    end receive_shipment;

    FUNCTION get_shipment_total_value (
        p_shipment_id       nit016.shipment_id%TYPE
    )
    RETURN NUMBER
    as
        v_total             NUMBER;
    begin
        select sum(item_total_cost)
          into v_total
          from (select (a.qty * b.quantity) * a.cost item_total_cost
                  from nit018 a,
                       nit002 b
                 where a.shipment_id = p_shipment_id
                   and a.item_id = b.item_id
                   and b."LEVEL" = 4);

        return v_total;
    end get_shipment_total_value;

    FUNCTION get_shipment_incidental_cost(
        p_shipment_id       nit016.shipment_id%TYPE
    )
    RETURN NUMBER
    as
        v_total             NUMBER;
    begin
        select sum(incidental_cost)
          into v_total
          from (select nvl(freight_cost, 0) +
                       nvl(insurance_cost, 0) +
                       nvl(handling_cost, 0) + 
                       nvl(duties_and_taxes, 0) + 
                       nvl(misc_expenses, 0) + 
                       nvl(vendor_credits, 0) incidental_cost
                  from nit017
                 where shipment_id = p_shipment_id);

        return v_total;
    end get_shipment_incidental_cost;

    FUNCTION post_shipment (
        p_shipment_id       nit016.shipment_id%TYPE
    )
    RETURN VARCHAR2
    as
        v_shipment_total_val        NUMBER;
        v_shipment_incidental_cost  NUMBER;
        v_received                  nit016.is_received%TYPE := 'N';
        v_message                   VARCHAR2(100) := 'OK';
        v_ship_no                   nit016.shipment_number%TYPE;
    begin
        select is_received, shipment_number
          into v_received, v_ship_no
          from nit016
         where shipment_id = p_shipment_id;

        if v_received = 'Y' then
            v_shipment_total_val := shipment_records_pkg.get_shipment_total_value(p_shipment_id);
            v_shipment_incidental_cost := shipment_records_pkg.get_shipment_incidental_cost(p_shipment_id);

            UPDATE nit018
               SET landed_cost = cost + (cost * ROUND(v_shipment_incidental_cost / v_shipment_total_val, 4))
             WHERE shipment_id = p_shipment_id;

            UPDATE nit016
               SET is_posted = 'Y'
             WHERE shipment_id = p_shipment_id;
        else 
            v_message := 'Shipment No. ' || v_ship_no ||' is not yet received.';
        end if;

        return v_message;
    exception
        when no_data_found then
            return 'Shipment does not exist';
    end post_shipment;

    FUNCTION post_all_po (
        p_shipment_id       nit016.shipment_id%TYPE
    )
    RETURN varchar2
    as
        v_vendor_code   nit006.vendor_code%TYPE;
        v_shipment_no   nit016.shipment_number%TYPE;

        TYPE t_tab IS TABLE OF nit012.po_id%TYPE;
        l_tab           t_tab;

        v_msg           varchar2(200);
    begin
        UPDATE nit012
           SET is_posted = 'Y'
         WHERE po_id IN (SELECT po_id 
                           FROM nit015
                          WHERE shipment_id = p_shipment_id)
           AND is_posted != 'Y'               
        RETURNING po_id BULK COLLECT INTO l_tab;

        BEGIN
            SELECT UPPER(c.vendor_code), a.shipment_number
              INTO v_vendor_code, v_shipment_no
              FROM nit016 a,
                   nit015 b,
                   nit006 c
             WHERE a.shipment_id = b.shipment_id
               AND b.vendor_id = c.vendor_id
               AND a.shipment_id = p_shipment_id
               AND b.vendor_sequence = 1;
        EXCEPTION
            WHEN NO_DATA_FOUND THEN
                v_shipment_no := null;
                v_vendor_code := null;
        END;

        IF v_shipment_no IS NULL THEN
            v_msg := 'No shipment selected. Please contact your administrator.';
        ELSIF l_tab.COUNT > 0 THEN
            v_msg := 'All Purchase Orders for Shipment ' || v_vendor_code || '#' || v_shipment_no || ' have been posted.';
        ELSE        
            v_msg := 'There are no unposted purchase orders for Shipment ' || v_shipment_no;
        END IF;

        return v_msg;
    end post_all_po;

    -- used by shipment_report.jasper subreport
    FUNCTION get_shipment_report_items (
        p_shipment_id       nit016.shipment_id%TYPE
    )
    RETURN rep_ship_item_tab PIPELINED
    AS
        v_rec   rep_ship_item_rec;
    BEGIN
        FOR x IN (SELECT a.shipment_id, a.shipment_items_id, b.item_desc,
                         a.qty cases, c.quantity cs_unit, 
                         c.uom_code cs_uom, 
                         d.internal_price fob_spn
                    FROM nit018 a,
                         nit001 b,
                         (SELECT w.item_id, w.quantity, x.uom_code
                            FROM nit002 w,
                                 nim026 x
                           WHERE w."LEVEL" = 4
                             AND w.uom_id = x.uom_id) c,
                         nit013 d
                   WHERE a.shipment_id = p_shipment_id
                     AND a.item_id = b.item_id
                     AND a.item_id = c.item_id
                     AND a.item_id = d.item_id(+)
                     AND a.po_id = d.po_id(+))
        LOOP
            v_rec.shipment_items_id := x.shipment_items_id;
            v_rec.shipment_id := x.shipment_id;
            v_rec.item_desc := x.item_desc;
            v_rec.cases := x.cases;
            v_rec.cs_units := x.cs_unit;
            v_rec.cs_uom := x.cs_uom;
            v_rec.total_units := x.cs_unit * x.cases;
            v_rec.fob_spn := NVL(x.fob_spn, 0);
            v_rec.incidental_cost := 99.9999;
            v_rec.unit_cost := 99999.99;
            v_rec.total_cost := 99999.99;
            PIPE ROW (v_rec);
        END LOOP;
    END get_shipment_report_items;

    FUNCTION get_shipment_vendor_invoices (
        p_shipment_id       nit016.shipment_id%TYPE
    )
    RETURN rep_ship_vendor_inv_tab PIPELINED
    AS
        v_rec   rep_ship_vendor_inv_rec;
    BEGIN
        FOR x IN (select a.vendor_sequence vendor_no,
                         b.vendor_name,
                         a.po_id ref_po,
                         a.svp_id
                    from nit015 a,
                         nit006 b
                   where a.shipment_id = p_shipment_id
                     and a.vendor_id = b.vendor_id
                   order by a.vendor_sequence)
        LOOP
            v_rec.vendor_no := x.vendor_no;
            v_rec.vendor_name := x.vendor_name;
            v_rec.ref_po := x.ref_po;

            SELECT LISTAGG(j.document_number, ',') WITHIN GROUP (ORDER BY i.invoice_id)
              INTO v_rec.invoices
              FROM nit035 i,
                   nit036 j
             WHERE i.invoice_id = j.invoice_id
               AND i.svp_id = x.svp_id;

            PIPE ROW (v_rec);
        END LOOP;
    END get_shipment_vendor_invoices;

    FUNCTION get_rep_duplicate_container_no (
        p_mth               VARCHAR2,
        p_yr                VARCHAR2,
        p_sort              VARCHAR2
    )
    RETURN shipment_tab PIPELINED
    AS
        v_rec               shipment_rec;
        v_mth_yr            VARCHAR2(10) := p_mth || '/' || p_yr;
    BEGIN
        FOR rec IN (SELECT CASE p_sort WHEN '1' THEN c.vendor_code
                    		           WHEN '2' THEN a.shipment_number
                                       WHEN '3' THEN TO_CHAR(a.eta, 'MM/DD/YYYY')
                                       WHEN '4' THEN a.container_no
                                       ELSE c.vendor_code
                                       END sort_col,
                           c.vendor_code,
                           a.shipment_number, a.vessel_name, a.vessel_bl_no,
                           case when a.is_posted = 'Y' THEN 'P'
                                when a.is_received = 'Y' THEN 'R'
                                else null
                                end p,
                           a.etd, 
                           a.eta,
                           a.container_no
                      FROM nit016 a,
                           nit015 b,
                           nit006 c
                     WHERE a.shipment_id = b.shipment_id
                       AND b.vendor_id = c.vendor_id
                       AND b.vendor_sequence = 1
                       AND EXISTS (SELECT x.container_no, COUNT(x.container_no)
                                     FROM nit016 x
                                    WHERE x.container_no = a.container_no
                                      AND x.eta BETWEEN add_months(trunc(to_date(v_mth_yr, 'MM/YYYY')), -6) AND 
                                                        add_months(last_day(to_date(v_mth_yr, 'MM/YYYY')), 6)
                                 GROUP BY x.container_no
                                   HAVING COUNT(x.container_no) > 1) 
                  ORDER BY sort_col)
        LOOP
            v_rec.vendor_code := rec.vendor_code;
            v_rec.shipment_number := rec.shipment_number;
            v_rec.vessel_name := rec.vessel_name;
            v_rec.vessel_bl_no := rec.vessel_bl_no;
            v_rec.etd := rec.etd;
            v_rec.eta := rec.eta;
            v_rec.container_no := rec.container_no;
            v_rec.month_s := TO_CHAR(TO_DATE(v_mth_yr, 'MM/YYYY'), 'fmMONTH, YYYY');

            PIPE ROW(v_rec);
        END LOOP;
    END get_rep_duplicate_container_no;

    FUNCTION get_inv_costing_sheet_main (
        p_shipment_id       VARCHAR2,
        p_month             VARCHAR2
    )
    RETURN inv_costing_sheet_main_tab PIPELINED
    AS
        v_rec               inv_costing_sheet_main_rec;
        v_month             NUMBER;
        v_shipment_id       NUMBER;
    BEGIN
        v_month := TO_NUMBER(p_month);
        v_shipment_id := TO_NUMBER(p_shipment_id);

        FOR rec IN (select a.shipment_id, a.shipment_number, d.vendor_name,
                           a.ata, a.vessel_name, a.vessel_bl_no, a.barge, a.barge_bl_no, a.container_no,
                           c.freight_cost, c.insurance_cost, c.handling_cost,
                           c.duties_and_taxes, c.misc_expenses, c.vendor_credits,
                           b.svp_id
                      from nit016 a,
                           nit015 b,
                           nit017 c,
                           nit006 d
                     where a.shipment_id = b.shipment_id
                       and a.shipment_id = c.shipment_id
                       and b.vendor_id = d.vendor_id
                       and b.vendor_sequence = 1
                       and (
                                (v_shipment_id IS NOT NULL AND a.shipment_id = v_shipment_id) OR
                                (v_month IS NOT NULL AND extract(month from a.ata) = v_month)
                           )
                    order by a.shipment_id)
        LOOP
            v_rec.shipment_id := rec.shipment_id;
            v_rec.shipment_number := rec.shipment_number;
            v_rec.vendor_name := rec.vendor_name;
            v_rec.ata := rec.ata;
            v_rec.vessel_name := rec.vessel_name;
            v_rec.vessel_bl_no := rec.vessel_bl_no;
            v_rec.barge := rec.barge;
            v_rec.barge_bl_no := rec.barge_bl_no;
            v_rec.container_no := rec.container_no;
            v_rec.freight_cost := NVL(rec.freight_cost, 0);
            v_rec.insurance_cost := NVL(rec.insurance_cost, 0);
            v_rec.handling_cost := NVL(rec.handling_cost, 0);
            v_rec.duties_and_taxes := NVL(rec.duties_and_taxes, 0);
            v_rec.misc_expenses := NVL(rec.misc_expenses, 0);
            v_rec.vendor_credits := NVL(rec.vendor_credits, 0);
            v_rec.title_h := TRIM(TO_CHAR(rec.ata, 'FMMONTH, YYYY'));

            BEGIN 
                SELECT y.document_number
                  INTO v_rec.document_number
                  FROM nit035 x, 
                       nit036 y
                 WHERE x.invoice_id = y.invoice_id
                   AND x.svp_id = rec.svp_id
                 ORDER BY x.invoice_id 
                 FETCH FIRST 1 ROWS ONLY;
            EXCEPTION
                WHEN NO_DATA_FOUND THEN
                    v_rec.document_number := NULL;
            END;

            PIPE ROW (v_rec);
        END LOOP;

    END get_inv_costing_sheet_main;

end "SHIPMENT_RECORDS_PKG";
/
















create or replace PACKAGE BODY STRING_FNC
IS
	FUNCTION split_string (p_list VARCHAR2, p_delimiter VARCHAR2)
    RETURN split_tble
    AS
        idx         PLS_INTEGER;
        str_list	VARCHAR2 (32767) := p_list;
        tbl         split_tble := split_tble();
    BEGIN
        LOOP
            idx := INSTR (str_list, p_delimiter);

            tbl.EXTEND;
            IF idx > 0 THEN
                tbl(tbl.LAST) := SUBSTR (str_list, 1, idx - 1);
                str_list := SUBSTR (str_list, idx + LENGTH (p_delimiter));
            ELSE
                tbl(tbl.LAST) := str_list;
                EXIT;
            END IF;            
        END LOOP;
        
        RETURN tbl;
    END split_string;
    
    FUNCTION split_string_pipelined (p_list VARCHAR2, p_delimiter VARCHAR2)
    RETURN split_tble PIPELINED
    AS
        tab             string_fnc.split_tble;
    BEGIN
        tab := string_fnc.split_string(p_list, p_delimiter);
        FOR x IN tab.FIRST .. tab.LAST
        LOOP
            PIPE ROW (tab(x));
        END LOOP;
    END split_string_pipelined;
END;
/




