---
# ====== Page: Update Item Price =============================
id: 22
identification: 
  name: Update Item Price
  alias: UPDATE-ITEM-PRICE
  title: Update Item Price

appearance: 
  page-mode: Modal Dialog
  dialog-template: Theme Default
  template-options: 
  - '#DEFAULT#'

dialog: 
  width: 30rem
  attributes: 
  - "close: function() { customEvent('customDialogClose'"
  - " {modalPageId: 'MODAL_CLOSE_FIXED'});} "
  chained: true

navigation-menu: 
  override-user-interface-level: false

navigation: 
  cursor-focus: Do not focus cursor
  warn-on-unsaved-changes: true

javascript: 
  function-and-global-variable-declaration: |
    const p22KeyMap = {
        escape : (v) => {
            $("#close").click();
        },
        enter: (v) => {
           // $("#hiddensubmit").trigger("click");
           let activeElement = document.activeElement;
    
            if ($(activeElement).is('input')) {
                var currentField = $(activeElement);
                var allInputs = $('input:visible:enabled');
                var currentIndex = allInputs.index(currentField); 
                var nextField = allInputs.eq(currentIndex + 1);
    
                if (currentIndex === allInputs.length - 1) {
                    $("#hiddensubmit").trigger("click");
                } else {
                    nextField.focus();
                }
            } else {
                $("#hiddensubmit").trigger("click"); 
            }
        }
    
    }
    
    
    function mapP22Keys() {
        $(document).off('keydown.p22keyevents');
        $(document).on('keydown.p22keyevents', (ev) => {
            var key = ev.key?.toLowerCase();
            if (p22KeyMap[key]) {
                ev.preventDefault();
                p22KeyMap[key]();
            }
        });
    }
    
    
  execute-when-page-loads: mapP22Keys();

css: 
  inline: |
    .render-container {
        display: flex;
        flex-wrap: wrap;
    }
    
    .render-container > div {
        display: flex;
        justify-content: center;
        align-items: center;
    }
    
    .uomLabel {
        width: 30%;
        margin-bottom: .5rem;
    }
    
    .priceLabel {
        width: 70%;
        margin-bottom: .5rem;
    }
    
    .labels {
        width: 30%;
    }
    
    .price {
        width: 70%;
    }
    
    
    .t-Dialog-body{
        label, input, .apex-item-display-only {
            font-size: 1.125rem;
        }
        background-color: #226597;
        padding-top: 0;
    }
    
    .t-Region-body{
        padding: 0.4;
    }
    
    /*
    .t-Form-label{
        white-space: nowrap;
    }
    */
    
    
    .white-text {
        color: white;
        font-size: 1.125rem;
    }
    
    .pvalue {
        text-align: right;
    }
    
    .labels, .price, .uomLabel, .priceLabel{
        font-size: 1.125rem;
    }

security: 
  authentication: Page Requires Authentication
  deep-linking: Application Default
  page-access-protection: Arguments Must Have Checksum
  form-auto-complete: Off
  browser-cache: Application Default

session-management: 
  rejoin-sessions: Application Default

advanced: 
  enable-duplicate-page-submissions: Yes - Enable page to be re-posted
  reload-on-submit: Only for Success

server-cache: 
  caching: Disabled

regions: 
- # ====== Region: Form / Table ================================
  id: 9119398378604131
  identification: 
    name: Form / Table
    type: Static Content

  source: 
    html-code: |
      <div class="render-container">
          <div class="uomLabel">Unit</div>
          <div class="priceLabel">Price</div>
      </div>

  layout: 
    sequence: 40
    parent-region: No Parent
    slot: BODY
    start-new-layout: false
    start-new-row: true
    column: Automatic
    new-column: true
    column-span: Automatic

  appearance: 
    template: Standard
    template-options: 
    - '#DEFAULT#'
    - t-Region--removeHeader js-removeLandmark
    - t-Region--scrollBody
    render-components: Above Content

  accessibility: 
    use-landmark: true
    landmark-type: Template Default

  advanced: 
    static-id: render
    region-display-selector: false
    exclude-title-from-translation: false

  customization: 
    customizable: Not Customizable By End Users

  attributes: 
    settings: 
      output-as: HTML
      expand-shortcuts: false

page-items: 
- # ====== Page Item: P22_ITEM_ID ==============================
  id: 9119735502604135
  identification: 
    name: P22_ITEM_ID
    type: Hidden

  settings: 
    value-protected: true

  layout: 
    sequence: 20
    region: No Parent
    slot: BODY

  advanced: 
    warn-on-unsaved-changes: Page Default

  source: 
    type: Null
    used: Only when current value in session state is null

  session-state: 
    data-type: VARCHAR2
    storage: Per Session (Persistent)

  security: 
    session-state-protection: Unrestricted
    store-value-encrypted-in-session-state: true
    restricted-characters: All characters can be saved.

- # ====== Page Item: P22_ITEM_NUM =============================
  id: 17124574252762055
  identification: 
    name: P22_ITEM_NUM
    type: Display Only

  label: 
    label: 'Item Number: '
    alignment: Left

  settings: 
    format: Plain Text
    based-on: Item Value
    show-line-breaks: true
    send-on-page-submit: false

  layout: 
    sequence: 20
    region: Form / Table # 9119398378604131
    slot: BODY
    alignment: Left
    start-new-layout: false
    start-new-row: false
    column: Automatic
    new-column: true
    column-span: 8
    label-column-span: 0

  appearance: 
    template: Optional
    template-options: 
    - '#DEFAULT#'
    - margin-bottom-md
    - t-Form-fieldContainer--boldDisplay

  advanced: 
    warn-on-unsaved-changes: Page Default

  source: 
    type: Null
    used: Only when current value in session state is null

  session-state: 
    data-type: VARCHAR2
    storage: Per Session (Persistent)

  security: 
    session-state-protection: Unrestricted
    store-value-encrypted-in-session-state: true
    restricted-characters: All characters can be saved.

- # ====== Page Item: P22_ITEM =================================
  id: 19844137604977005
  identification: 
    name: P22_ITEM
    type: Display Only

  label: 
    label: New
    alignment: Left

  settings: 
    format: Plain Text
    based-on: Item Value
    show-line-breaks: true
    send-on-page-submit: false

  layout: 
    sequence: 10
    region: Form / Table # 9119398378604131
    slot: BODY
    alignment: Left
    start-new-layout: false
    start-new-row: true
    column: Automatic
    new-column: true
    column-span: Automatic
    label-column-span: 0

  appearance: 
    template: Optional
    template-options: 
    - '#DEFAULT#'
    - margin-bottom-md
    - t-Form-fieldContainer--normalDisplay

  advanced: 
    warn-on-unsaved-changes: Page Default

  source: 
    type: Null
    used: Only when current value in session state is null

  default: 
    type: Static
    static-value: 'Item Number: '

  session-state: 
    data-type: VARCHAR2
    storage: Per Session (Persistent)

  security: 
    session-state-protection: Unrestricted
    store-value-encrypted-in-session-state: true
    restricted-characters: All characters can be saved.

- # ====== Page Item: P22_SUCCESS_MSG ==========================
  id: 19845098319977014
  identification: 
    name: P22_SUCCESS_MSG
    type: Hidden

  settings: 
    value-protected: true

  layout: 
    sequence: 30
    region: No Parent
    slot: BODY

  advanced: 
    warn-on-unsaved-changes: Page Default

  source: 
    type: Null
    used: Only when current value in session state is null

  default: 
    type: Static
    static-value: Test from Update Price

  session-state: 
    data-type: VARCHAR2
    storage: Per Session (Persistent)

  security: 
    session-state-protection: Unrestricted
    store-value-encrypted-in-session-state: true
    restricted-characters: All characters can be saved.

buttons: 
- # ====== Button: Enter =======================================
  id: 11801922717825316
  identification: 
    button-name: Enter
    label: press enter to update or to exit

  layout: 
    sequence: 50
    region: No Parent
    slot: BODY
    start-new-layout: false
    start-new-row: true
    column: Automatic
    new-column: true
    column-span: Automatic
    alignment: Left center

  appearance: 
    button-template: Text
    hot: false
    template-options: 
    - '#DEFAULT#'
    - t-Button--noUI
    - t-Button--stretch
    css-classes: 
    - white-text

  behavior: 
    action: Defined by Dynamic Action
    execute-validations: true

  advanced: 
    static-id: hiddensubmit
    custom-attributes: 
    - tabindex="-1"

dynamic-actions: 
- # ====== Dynamic Action: Retrieve and render data ============
  id: 9119454281604132
  identification: 
    name: Retrieve and render data

  execution: 
    sequence: 10
    event-scope: Static

  when: 
    event: Page Load

  actions: 
  - # ====== Action: Execute JavaScript Code =====================
    id: 9119530893604133
    identification: 
      action: Execute JavaScript Code

    settings: 
      code: |
        apex.server.process("GET_DATA", {
            pageItems : ["P22_ITEM_ID"]
        }, {
            dataType: 'json'
        })
        .done((data) => {
        
            let isFirstField = true;
        
            data.forEach((item, index) => {
        
                let priceId = `price_field_${index}`;
                let uomCodeId = `uom_code_${index}`;
        
                $(".render-container").append(`<div class="labels"><span id="${uomCodeId}" class="uomcodevalue">${item.UOM_CODE}</span></div>`);
                $(".render-container")
                    .append(`<div class="price t-Form-fieldContainer rel-col t-Form-fieldContainer--stretchInputs t-Form-fieldContainer--large lto9488726544111627_0 apex-item-wrapper apex-item-wrapper--text-field apex-item-wrapper--has-icon">
                                <div class="t-Form-inputContainer col col-12">
                                    <div class="t-Form-itemWrapper">
                                        <input type="text" id="${priceId}" class="pvalue text_field apex-item-text apex-item-number u-textEnd apex-item-has-icon required" value="${parseFloat(item.PRICE).toFixed(2)}" maxlength="8" data-format="999G999G999G999G990D00" inputmode="decimal" />
                                        <span class="apex-item-icon fa fa-dollar" aria-hidden="true"></span>
                                    </div>
                                    <div class="t-Form-itemAssistance">
                                         <span id="${priceId}_error_placeholder" class="a-Form-error u-hidden" data-template-id="4382365997084278_ET"></span>
                                        <div class="t-Form-itemRequired" aria-hidden="true">Required</div>
                                    </div>
                                </div>
                            </div>`);
        
                $(`#${priceId}`).on("blur", function() {
                let value = $(this).val().replace(/,/g, '');
                let valid = true;
        
                if (value.trim() === "" || isNaN(value)) {
                    valid = false;
                    $(this).val('');
                    apex.message.showErrors({
                        type: "error",
                        location: "inline",
                        pageItem: priceId,
                        message: "This field cannot be empty."
                    });
                } else if (!/^(\d{1,3}(,\d{3})*|\d+)(\.\d{0,2})?$/.test(value)) {
                    valid = false;
                    apex.message.showErrors({
                        type: "error",
                        location: "inline",
                        pageItem: priceId,
                        message: "Invalid price format (max 5 digits, 2 decimals)."
                    });
                } else {
                    apex.message.clearErrors(priceId);
                    $(this).val(parseFloat($(this).val()).toFixed(2));
        
                }
            });
        
                if (isFirstField) {
                    $(`#${priceId}`).focus();  // Focus on the first input field
                    isFirstField = false;       // Ensure focus is only set once
                }
            });
        /*
            $(".pvalue").on("change", function() {
                $(this).val(parseFloat($(this).val()).toFixed(2));
            });
        */
        });
        
        

    execution: 
      sequence: 10
      event: Retrieve and render data # 9119454281604132
      fire-when-event-result-is: True
      fire-on-initialization: false

- # ====== Dynamic Action: Click Enter =========================
  id: 11802089963825317
  identification: 
    name: Click Enter

  execution: 
    sequence: 20
    event-scope: Static
    type: Immediate

  when: 
    event: Click
    selection-type: Button
    button: Enter # 11801922717825316

  actions: 
  - # ====== Action: Execute JavaScript Code =====================
    id: 11802164485825318
    identification: 
      action: Execute JavaScript Code

    settings: 
      code: |
        let data = [];
        
        let valid = true; 
        
        
        $(".render-container").find(".error-message").remove();
        
           $(".render-container").find("input[id^='price_field_']").each(function() {
                let id = $(this).attr('id');
                let value = $(this).val();
                let index = id.split('_').pop(); 
        
                let uomCodeId = `uom_code_${index}`;
                let uomCode = $(`#${uomCodeId}`).text(); 
        
            if (value.trim() === "") {
                valid = false; 
        
                apex.message.showErrors({
                    type: "error",
                    location: "inline",
                    pageItem: id, 
                    message: "This field cannot be empty."
                });
            }
        
            else if (!/^\d{0,5}(\.\d{0,2})?$/.test(value)) {
                valid = false; 
        
                apex.message.showErrors({
                    type: "error",
                    location: "inline",
                    pageItem: id,
                    message: "Invalid price format (max 5 digits, 2 decimals)."
                });
            }
        
                data.push({
                    uom_code: uomCode,
                    price: value
                });
            });
        
        
        if (!valid) {
            return; 
        }
        
        
        let jsonObject = {
            "item_id": $("#P22_ITEM_ID").val(),
            "uom_data" : data
        
        }
        console.log(JSON.stringify(jsonObject));
        
        apex.server.process("UPDATE_DATA", {
            p_clob_01: JSON.stringify(jsonObject)
        
        },{
            dataType: 'json'
        }).done((data) => {
            console.log("Success")
        
            apex.navigation.dialog.close(true);
        
        }).fail((jqXHR, textStatus, errorThrown) => {
            console.log("Error")
        
        }).always(() => {
        
        });

    execution: 
      sequence: 10
      event: Click Enter # 11802089963825317
      fire-when-event-result-is: True
      fire-on-initialization: false

processes: 
- # ====== Process: GET_DATA ===================================
  id: 9119631532604134
  identification: 
    name: GET_DATA
    type: Execute Code
    execution-chain: None

  source: 
    location: Local Database
    language: PL/SQL
    pl/sql-code: |
      declare
          l_cursor sys_refcursor;
      begin
      
          OPEN l_cursor FOR 
          SELECT nit002.uom_id, nit002.price, nim026.uom_code
          FROM nit002
          JOIN nim026 ON nit002.uom_id = nim026.uom_id
          WHERE nit002.item_id = :P22_ITEM_ID  
          ORDER BY nit002."LEVEL";
          APEX_JSON.write(l_cursor);
      
      end;

  execution: 
    sequence: 10
    point: Ajax Callback
    run-process: Once Per Page Visit (default)

- # ====== Process: UPDATE_DATA ================================
  id: 11802295467825319
  identification: 
    name: UPDATE_DATA
    type: Execute Code
    execution-chain: None

  source: 
    location: Local Database
    language: PL/SQL
    pl/sql-code: |
      DECLARE
          l_json_clob CLOB;
          l_json json_object_t;
      
          l_uom_code nim026.uom_code%type;
          l_uom_id nit002.uom_id%type;
          l_price nit002.price%type;
          l_item_id nit002.item_id%type;
          l_old_price NIT002.PRICE%TYPE;
      
       BEGIN 
      
          l_json_clob := apex_application.g_clob_01;
      
          l_json := json_object_t.parse(l_json_clob);
      
          l_item_id := l_json.get_number('item_id');
      
          FOR rec IN ( 
              SELECT * 
              FROM JSON_TABLE(
                  l_json_clob, '$.uom_data[*]'
                  COLUMNS (
                      uom_code VARCHAR(50) PATH '$.uom_code',
                      price NUMBER PATH '$.price'
                  )
              )
          ) LOOP
              l_uom_code := rec.uom_code;
              l_price := rec.price;
      
              SELECT uom_id
              INTO l_uom_id
              FROM NIM026
              WHERE uom_code = l_uom_code;
      
              SELECT PRICE
              INTO l_old_price
              FROM NIT002
              WHERE uom_id = l_uom_id
              AND item_id = l_item_id;
      
              IF l_old_price <> l_price THEN
                  INSERT INTO NIT003 (
                      ITEM_ID,
                      CHANGED_COLUMN_NAME,
                      OLD_VALUE,
                      NEW_VALUE,
                      CREATE_USER,
                      CREATE_DATE
                  ) VALUES (
                      l_item_id,
                      'PRICE',
                      l_old_price,
                      l_price,
                      :APP_USER,
                      SYSTIMESTAMP
                  );
              END IF;
      
              UPDATE NIT002
              SET price = l_price
              WHERE uom_id = l_uom_id
              AND item_id = l_item_id;
      
          END LOOP;
      
          apex_util.set_session_state('SUCCESS_MSG', 'Price updated successfully');
      
          apex_json.open_object;
          apex_json.write('message', 'Success');
          apex_json.close_object;
      
      EXCEPTION
          WHEN OTHERS THEN
              apex_json.open_object;
              apex_json.write('message', 'Error: ' || SQLERRM);
              apex_json.close_object;
              RAISE;
      
      END;

  execution: 
    sequence: 20
    point: Ajax Callback
    run-process: Once Per Page Visit (default)

  success-message: 
    success-message: Price updated successfully

